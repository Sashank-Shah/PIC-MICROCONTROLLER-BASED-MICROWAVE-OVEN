

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Sep 27 12:13:28 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.41
    41                           ; Generated 25/01/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F877A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0098                     	;# 
   183  0099                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  010F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000D                     	;# 
   208  000E                     	;# 
   209  000E                     	;# 
   210  000F                     	;# 
   211  0010                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0013                     	;# 
   215  0014                     	;# 
   216  0015                     	;# 
   217  0015                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001B                     	;# 
   225  001C                     	;# 
   226  001D                     	;# 
   227  001E                     	;# 
   228  001F                     	;# 
   229  0081                     	;# 
   230  0085                     	;# 
   231  0086                     	;# 
   232  0087                     	;# 
   233  0088                     	;# 
   234  0089                     	;# 
   235  008C                     	;# 
   236  008D                     	;# 
   237  008E                     	;# 
   238  0091                     	;# 
   239  0092                     	;# 
   240  0093                     	;# 
   241  0094                     	;# 
   242  0098                     	;# 
   243  0099                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  010F                     	;# 
   252  018C                     	;# 
   253  018D                     	;# 
   254  0000                     	;# 
   255  0001                     	;# 
   256  0002                     	;# 
   257  0003                     	;# 
   258  0004                     	;# 
   259  0005                     	;# 
   260  0006                     	;# 
   261  0007                     	;# 
   262  0008                     	;# 
   263  0009                     	;# 
   264  000A                     	;# 
   265  000B                     	;# 
   266  000C                     	;# 
   267  000D                     	;# 
   268  000E                     	;# 
   269  000E                     	;# 
   270  000F                     	;# 
   271  0010                     	;# 
   272  0011                     	;# 
   273  0012                     	;# 
   274  0013                     	;# 
   275  0014                     	;# 
   276  0015                     	;# 
   277  0015                     	;# 
   278  0016                     	;# 
   279  0017                     	;# 
   280  0018                     	;# 
   281  0019                     	;# 
   282  001A                     	;# 
   283  001B                     	;# 
   284  001B                     	;# 
   285  001C                     	;# 
   286  001D                     	;# 
   287  001E                     	;# 
   288  001F                     	;# 
   289  0081                     	;# 
   290  0085                     	;# 
   291  0086                     	;# 
   292  0087                     	;# 
   293  0088                     	;# 
   294  0089                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0093                     	;# 
   301  0094                     	;# 
   302  0098                     	;# 
   303  0099                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  009F                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  010F                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  0000                     	;# 
   315  0001                     	;# 
   316  0002                     	;# 
   317  0003                     	;# 
   318  0004                     	;# 
   319  0005                     	;# 
   320  0006                     	;# 
   321  0007                     	;# 
   322  0008                     	;# 
   323  0009                     	;# 
   324  000A                     	;# 
   325  000B                     	;# 
   326  000C                     	;# 
   327  000D                     	;# 
   328  000E                     	;# 
   329  000E                     	;# 
   330  000F                     	;# 
   331  0010                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0013                     	;# 
   335  0014                     	;# 
   336  0015                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  001D                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  0081                     	;# 
   350  0085                     	;# 
   351  0086                     	;# 
   352  0087                     	;# 
   353  0088                     	;# 
   354  0089                     	;# 
   355  008C                     	;# 
   356  008D                     	;# 
   357  008E                     	;# 
   358  0091                     	;# 
   359  0092                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0098                     	;# 
   363  0099                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  018C                     	;# 
   373  018D                     	;# 
   374                           
   375                           	psect	idataCOMMON
   376  07FB                     __pidataCOMMON:	
   377                           
   378                           ;initializer for read_matrix_keypad@once
   379  07FB  3401               	retlw	1
   380  0008                     _PORTD	set	8
   381  0091                     _T2CKPS1	set	145
   382  0090                     _T2CKPS0	set	144
   383  0061                     _TMR2IF	set	97
   384  0033                     _RB3	set	51
   385  0092                     _TMR2ON	set	146
   386  005F                     _GIE	set	95
   387  005E                     _PEIE	set	94
   388  003A                     _RC2	set	58
   389  0039                     _RC1	set	57
   390  0049                     _RE1	set	73
   391  004A                     _RE2	set	74
   392  0032                     _RB2	set	50
   393  0031                     _RB1	set	49
   394  0030                     _RB0	set	48
   395  0040                     _RD0	set	64
   396  0041                     _RD1	set	65
   397  0042                     _RD2	set	66
   398  0043                     _RD3	set	67
   399  0092                     _PR2	set	146
   400  0088                     _TRISD	set	136
   401  0086                     _TRISB	set	134
   402  0461                     _TMR2IE	set	1121
   403  043A                     _TRISC2	set	1082
   404  0439                     _TRISC1	set	1081
   405  0449                     _TRISE1	set	1097
   406  044A                     _TRISE2	set	1098
   407  040F                     _nRBPU	set	1039
   408                           
   409                           	psect	strings
   410  0800                     __pstrings:	
   411  0800                     stringtab:	
   412  0800                     __stringtab:	
   413                           
   414                           ;	String table - string pointers are 2 bytes each
   415  0800  1BFF               	btfsc	btemp+1,7
   416  0801  280A               	ljmp	stringcode
   417  0802  1383               	bcf	3,7
   418  0803  187F               	btfsc	btemp+1,0
   419  0804  1783               	bsf	3,7
   420  0805  0800               	movf	0,w
   421  0806  0A84               	incf	4,f
   422  0807  1903               	skipnz
   423  0808  0AFF               	incf	btemp+1,f
   424  0809  0008               	return
   425  080A                     stringcode:	
   426  080A  087F               	movf	btemp+1,w
   427  080B  397F               	andlw	127
   428  080C  008A               	movwf	10
   429  080D  0804               	movf	4,w
   430  080E  0A84               	incf	4,f
   431  080F  1903               	skipnz
   432  0810  0AFF               	incf	btemp+1,f
   433  0811  0082               	movwf	2
   434  0812                     __stringbase:	
   435  0812                     __end_of__stringtab:	
   436                           
   437                           	psect	stringtext
   438  0500                     __pstringtext:	
   439  0500                     STR_18:	
   440  0500  3420               	retlw	32	;' '
   441  0501  3436               	retlw	54	;'6'
   442  0502  342E               	retlw	46	;'.'
   443  0503  3453               	retlw	83	;'S'
   444  0504  3474               	retlw	116	;'t'
   445  0505  346F               	retlw	111	;'o'
   446  0506  3470               	retlw	112	;'p'
   447  0507  3420               	retlw	32	;' '
   448  0508  3420               	retlw	32	;' '
   449  0509  3420               	retlw	32	;' '
   450  050A  3420               	retlw	32	;' '
   451  050B  3420               	retlw	32	;' '
   452  050C  3420               	retlw	32	;' '
   453  050D  3420               	retlw	32	;' '
   454  050E  3420               	retlw	32	;' '
   455  050F  3420               	retlw	32	;' '
   456  0510  3400               	retlw	0
   457  0511                     STR_17:	
   458  0511  3420               	retlw	32	;' '
   459  0512  3435               	retlw	53	;'5'
   460  0513  342E               	retlw	46	;'.'
   461  0514  3450               	retlw	80	;'P'
   462  0515  3461               	retlw	97	;'a'
   463  0516  3475               	retlw	117	;'u'
   464  0517  3473               	retlw	115	;'s'
   465  0518  3465               	retlw	101	;'e'
   466  0519  3420               	retlw	32	;' '
   467  051A  3420               	retlw	32	;' '
   468  051B  3420               	retlw	32	;' '
   469  051C  3420               	retlw	32	;' '
   470  051D  3420               	retlw	32	;' '
   471  051E  3420               	retlw	32	;' '
   472  051F  3420               	retlw	32	;' '
   473  0520  3420               	retlw	32	;' '
   474  0521  3400               	retlw	0
   475  0522                     STR_2:	
   476  0522  3420               	retlw	32	;' '
   477  0523  3420               	retlw	32	;' '
   478  0524  3450               	retlw	80	;'P'
   479  0525  346F               	retlw	111	;'o'
   480  0526  3477               	retlw	119	;'w'
   481  0527  3465               	retlw	101	;'e'
   482  0528  3472               	retlw	114	;'r'
   483  0529  3469               	retlw	105	;'i'
   484  052A  346E               	retlw	110	;'n'
   485  052B  3467               	retlw	103	;'g'
   486  052C  3420               	retlw	32	;' '
   487  052D  344F               	retlw	79	;'O'
   488  052E  344E               	retlw	78	;'N'
   489  052F  3420               	retlw	32	;' '
   490  0530  3420               	retlw	32	;' '
   491  0531  3420               	retlw	32	;' '
   492  0532  3400               	retlw	0
   493  0533                     STR_1:	
   494  0533  3420               	retlw	32	;' '
   495  0534  3450               	retlw	80	;'P'
   496  0535  346F               	retlw	111	;'o'
   497  0536  3477               	retlw	119	;'w'
   498  0537  3465               	retlw	101	;'e'
   499  0538  3472               	retlw	114	;'r'
   500  0539  3420               	retlw	32	;' '
   501  053A  343D               	retlw	61	;'='
   502  053B  3420               	retlw	32	;' '
   503  053C  3439               	retlw	57	;'9'
   504  053D  3430               	retlw	48	;'0'
   505  053E  3430               	retlw	48	;'0'
   506  053F  3457               	retlw	87	;'W'
   507  0540  3420               	retlw	32	;' '
   508  0541  3420               	retlw	32	;' '
   509  0542  3420               	retlw	32	;' '
   510  0543  3400               	retlw	0
   511  0544                     STR_16:	
   512  0544  3420               	retlw	32	;' '
   513  0545  3434               	retlw	52	;'4'
   514  0546  342E               	retlw	46	;'.'
   515  0547  3453               	retlw	83	;'S'
   516  0548  3474               	retlw	116	;'t'
   517  0549  3461               	retlw	97	;'a'
   518  054A  3472               	retlw	114	;'r'
   519  054B  3474               	retlw	116	;'t'
   520  054C  342F               	retlw	47	;'/'
   521  054D  3452               	retlw	82	;'R'
   522  054E  3465               	retlw	101	;'e'
   523  054F  3473               	retlw	115	;'s'
   524  0550  3475               	retlw	117	;'u'
   525  0551  346D               	retlw	109	;'m'
   526  0552  3465               	retlw	101	;'e'
   527  0553  3420               	retlw	32	;' '
   528  0554  3400               	retlw	0
   529  0555                     STR_3:	
   530  0555  3420               	retlw	32	;' '
   531  0556  344D               	retlw	77	;'M'
   532  0557  3469               	retlw	105	;'i'
   533  0558  3463               	retlw	99	;'c'
   534  0559  3472               	retlw	114	;'r'
   535  055A  346F               	retlw	111	;'o'
   536  055B  3477               	retlw	119	;'w'
   537  055C  3461               	retlw	97	;'a'
   538  055D  3476               	retlw	118	;'v'
   539  055E  3465               	retlw	101	;'e'
   540  055F  3420               	retlw	32	;' '
   541  0560  344F               	retlw	79	;'O'
   542  0561  3476               	retlw	118	;'v'
   543  0562  3465               	retlw	101	;'e'
   544  0563  346E               	retlw	110	;'n'
   545  0564  3420               	retlw	32	;' '
   546  0565  3400               	retlw	0
   547  0566                     STR_20:	
   548  0566  3453               	retlw	83	;'S'
   549  0567  3445               	retlw	69	;'E'
   550  0568  3454               	retlw	84	;'T'
   551  0569  3420               	retlw	32	;' '
   552  056A  3454               	retlw	84	;'T'
   553  056B  3445               	retlw	69	;'E'
   554  056C  344D               	retlw	77	;'M'
   555  056D  3450               	retlw	80	;'P'
   556  056E  342E               	retlw	46	;'.'
   557  056F  3420               	retlw	32	;' '
   558  0570  3428               	retlw	40	;'('
   559  0571  3420               	retlw	32	;' '
   560  0572  3420               	retlw	32	;' '
   561  0573  3443               	retlw	67	;'C'
   562  0574  3420               	retlw	32	;' '
   563  0575  3429               	retlw	41	;')'
   564  0576  3400               	retlw	0
   565  0577                     STR_8:	
   566  0577  3453               	retlw	83	;'S'
   567  0578  3445               	retlw	69	;'E'
   568  0579  3454               	retlw	84	;'T'
   569  057A  3420               	retlw	32	;' '
   570  057B  3454               	retlw	84	;'T'
   571  057C  3449               	retlw	73	;'I'
   572  057D  344D               	retlw	77	;'M'
   573  057E  3445               	retlw	69	;'E'
   574  057F  3420               	retlw	32	;' '
   575  0580  3428               	retlw	40	;'('
   576  0581  344D               	retlw	77	;'M'
   577  0582  344D               	retlw	77	;'M'
   578  0583  343A               	retlw	58	;':'
   579  0584  3453               	retlw	83	;'S'
   580  0585  3453               	retlw	83	;'S'
   581  0586  3429               	retlw	41	;')'
   582  0587  3400               	retlw	0
   583  0588                     STR_13:	
   584  0588  3444               	retlw	68	;'D'
   585  0589  346F               	retlw	111	;'o'
   586  058A  346F               	retlw	111	;'o'
   587  058B  3472               	retlw	114	;'r'
   588  058C  3420               	retlw	32	;' '
   589  058D  3453               	retlw	83	;'S'
   590  058E  3474               	retlw	116	;'t'
   591  058F  3461               	retlw	97	;'a'
   592  0590  3474               	retlw	116	;'t'
   593  0591  3475               	retlw	117	;'u'
   594  0592  3473               	retlw	115	;'s'
   595  0593  343A               	retlw	58	;':'
   596  0594  344F               	retlw	79	;'O'
   597  0595  3450               	retlw	80	;'P'
   598  0596  3445               	retlw	69	;'E'
   599  0597  344E               	retlw	78	;'N'
   600  0598  3400               	retlw	0
   601  0599                     STR_10:	
   602  0599  342A               	retlw	42	;'*'
   603  059A  343A               	retlw	58	;':'
   604  059B  3443               	retlw	67	;'C'
   605  059C  344C               	retlw	76	;'L'
   606  059D  3445               	retlw	69	;'E'
   607  059E  3441               	retlw	65	;'A'
   608  059F  3452               	retlw	82	;'R'
   609  05A0  3420               	retlw	32	;' '
   610  05A1  3420               	retlw	32	;' '
   611  05A2  3423               	retlw	35	;'#'
   612  05A3  343A               	retlw	58	;':'
   613  05A4  3445               	retlw	69	;'E'
   614  05A5  344E               	retlw	78	;'N'
   615  05A6  3454               	retlw	84	;'T'
   616  05A7  3445               	retlw	69	;'E'
   617  05A8  3452               	retlw	82	;'R'
   618  05A9  3400               	retlw	0
   619  05AA                     STR_19:	
   620  05AA  3443               	retlw	67	;'C'
   621  05AB  346F               	retlw	111	;'o'
   622  05AC  346F               	retlw	111	;'o'
   623  05AD  346B               	retlw	107	;'k'
   624  05AE  3469               	retlw	105	;'i'
   625  05AF  346E               	retlw	110	;'n'
   626  05B0  3467               	retlw	103	;'g'
   627  05B1  3420               	retlw	32	;' '
   628  05B2  3454               	retlw	84	;'T'
   629  05B3  3469               	retlw	105	;'i'
   630  05B4  346D               	retlw	109	;'m'
   631  05B5  3465               	retlw	101	;'e'
   632  05B6  3420               	retlw	32	;' '
   633  05B7  3455               	retlw	85	;'U'
   634  05B8  3450               	retlw	80	;'P'
   635  05B9  3400               	retlw	0
   636  05BA                     STR_23:	
   637  05BA  3420               	retlw	32	;' '
   638  05BB  3449               	retlw	73	;'I'
   639  05BC  346E               	retlw	110	;'n'
   640  05BD  3476               	retlw	118	;'v'
   641  05BE  3461               	retlw	97	;'a'
   642  05BF  346C               	retlw	108	;'l'
   643  05C0  3469               	retlw	105	;'i'
   644  05C1  3464               	retlw	100	;'d'
   645  05C2  3420               	retlw	32	;' '
   646  05C3  3454               	retlw	84	;'T'
   647  05C4  3465               	retlw	101	;'e'
   648  05C5  346D               	retlw	109	;'m'
   649  05C6  3470               	retlw	112	;'p'
   650  05C7  342E               	retlw	46	;'.'
   651  05C8  3400               	retlw	0
   652  05C9                     STR_24:	
   653  05C9  3420               	retlw	32	;' '
   654  05CA  3420               	retlw	32	;' '
   655  05CB  3450               	retlw	80	;'P'
   656  05CC  3472               	retlw	114	;'r'
   657  05CD  3465               	retlw	101	;'e'
   658  05CE  342D               	retlw	45	;'-'
   659  05CF  3448               	retlw	72	;'H'
   660  05D0  3465               	retlw	101	;'e'
   661  05D1  3461               	retlw	97	;'a'
   662  05D2  3474               	retlw	116	;'t'
   663  05D3  3469               	retlw	105	;'i'
   664  05D4  346E               	retlw	110	;'n'
   665  05D5  3467               	retlw	103	;'g'
   666  05D6  3400               	retlw	0
   667  05D7                     STR_14:	
   668  05D7  3450               	retlw	80	;'P'
   669  05D8  346C               	retlw	108	;'l'
   670  05D9  3465               	retlw	101	;'e'
   671  05DA  3461               	retlw	97	;'a'
   672  05DB  3473               	retlw	115	;'s'
   673  05DC  3465               	retlw	101	;'e'
   674  05DD  3420               	retlw	32	;' '
   675  05DE  3443               	retlw	67	;'C'
   676  05DF  346C               	retlw	108	;'l'
   677  05E0  346F               	retlw	111	;'o'
   678  05E1  3473               	retlw	115	;'s'
   679  05E2  3465               	retlw	101	;'e'
   680  05E3  3400               	retlw	0
   681  05E4                     STR_6:	
   682  05E4  3433               	retlw	51	;'3'
   683  05E5  342E               	retlw	46	;'.'
   684  05E6  3443               	retlw	67	;'C'
   685  05E7  346F               	retlw	111	;'o'
   686  05E8  346E               	retlw	110	;'n'
   687  05E9  3476               	retlw	118	;'v'
   688  05EA  3465               	retlw	101	;'e'
   689  05EB  3463               	retlw	99	;'c'
   690  05EC  3474               	retlw	116	;'t'
   691  05ED  3469               	retlw	105	;'i'
   692  05EE  346F               	retlw	111	;'o'
   693  05EF  346E               	retlw	110	;'n'
   694  05F0  3400               	retlw	0
   695  05F1                     STR_25:	
   696  05F1  3454               	retlw	84	;'T'
   697  05F2  3469               	retlw	105	;'i'
   698  05F3  346D               	retlw	109	;'m'
   699  05F4  3465               	retlw	101	;'e'
   700  05F5  3420               	retlw	32	;' '
   701  05F6  3452               	retlw	82	;'R'
   702  05F7  3465               	retlw	101	;'e'
   703  05F8  346D               	retlw	109	;'m'
   704  05F9  342E               	retlw	46	;'.'
   705  05FA  343D               	retlw	61	;'='
   706  05FB  3420               	retlw	32	;' '
   707  05FC  3400               	retlw	0
   708  05FD                     STR_21:	
   709  05FD  3454               	retlw	84	;'T'
   710  05FE  3445               	retlw	69	;'E'
   711  05FF  344D               	retlw	77	;'M'
   712  0600  3450               	retlw	80	;'P'
   713  0601  3420               	retlw	32	;' '
   714  0602  343A               	retlw	58	;':'
   715  0603  3420               	retlw	32	;' '
   716  0604  3420               	retlw	32	;' '
   717  0605  3430               	retlw	48	;'0'
   718  0606  3430               	retlw	48	;'0'
   719  0607  3430               	retlw	48	;'0'
   720  0608  3400               	retlw	0
   721  0609                     STR_9:	
   722  0609  3454               	retlw	84	;'T'
   723  060A  3449               	retlw	73	;'I'
   724  060B  344D               	retlw	77	;'M'
   725  060C  3445               	retlw	69	;'E'
   726  060D  342D               	retlw	45	;'-'
   727  060E  3420               	retlw	32	;' '
   728  060F  3430               	retlw	48	;'0'
   729  0610  3430               	retlw	48	;'0'
   730  0611  343A               	retlw	58	;':'
   731  0612  3430               	retlw	48	;'0'
   732  0613  3430               	retlw	48	;'0'
   733  0614  3400               	retlw	0
   734  0615                     STR_15:	
   735  0615  3420               	retlw	32	;' '
   736  0616  3454               	retlw	84	;'T'
   737  0617  3449               	retlw	73	;'I'
   738  0618  344D               	retlw	77	;'M'
   739  0619  3445               	retlw	69	;'E'
   740  061A  3420               	retlw	32	;' '
   741  061B  343D               	retlw	61	;'='
   742  061C  3420               	retlw	32	;' '
   743  061D  3420               	retlw	32	;' '
   744  061E  3400               	retlw	0
   745  061F                     STR_5:	
   746  061F  3432               	retlw	50	;'2'
   747  0620  342E               	retlw	46	;'.'
   748  0621  3447               	retlw	71	;'G'
   749  0622  3472               	retlw	114	;'r'
   750  0623  3469               	retlw	105	;'i'
   751  0624  346C               	retlw	108	;'l'
   752  0625  346C               	retlw	108	;'l'
   753  0626  3400               	retlw	0
   754  0627                     STR_4:	
   755  0627  3431               	retlw	49	;'1'
   756  0628  342E               	retlw	46	;'.'
   757  0629  344D               	retlw	77	;'M'
   758  062A  3469               	retlw	105	;'i'
   759  062B  3463               	retlw	99	;'c'
   760  062C  3472               	retlw	114	;'r'
   761  062D  346F               	retlw	111	;'o'
   762  062E  3400               	retlw	0
   763  062F                     STR_7:	
   764  062F  3434               	retlw	52	;'4'
   765  0630  342E               	retlw	46	;'.'
   766  0631  3453               	retlw	83	;'S'
   767  0632  3474               	retlw	116	;'t'
   768  0633  3461               	retlw	97	;'a'
   769  0634  3472               	retlw	114	;'r'
   770  0635  3474               	retlw	116	;'t'
   771  0636  3400               	retlw	0
   772  050E                     
   773                           ; #config settings
   774  0000                     
   775                           	psect	cinit
   776  0015                     start_initialization:	
   777  0015                     __initialization:	
   778                           
   779                           ; Initialize objects allocated to COMMON
   780  0015  120A  118A  27FB  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   781  001A  00F9               	movwf	__pdataCOMMON& (0+127)
   782                           
   783                           ; Clear objects allocated to BANK0
   784  001B  1383               	bcf	3,7	;select IRP bank0
   785  001C  3020               	movlw	low __pbssBANK0
   786  001D  0084               	movwf	4
   787  001E  3044               	movlw	low (__pbssBANK0+36)
   788  001F  120A  158A  2441   	fcall	clear_ram0
   789                           
   790                           ; Clear objects allocated to COMMON
   791  0022  01F7               	clrf	__pbssCOMMON& (0+127)
   792  0023  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   793  0024                     end_of_initialization:	
   794                           ;End of C runtime variable initialization code
   795                           
   796  0024                     __end_of__initialization:	
   797  0024  0183               	clrf	3
   798  0025  120A  118A  2C05   	ljmp	_main	;jump to C main() function
   799                           
   800                           	psect	bssCOMMON
   801  0077                     __pbssCOMMON:	
   802  0077                     isr@count:	
   803  0077                     	ds	2
   804                           
   805                           	psect	dataCOMMON
   806  0079                     __pdataCOMMON:	
   807  0079                     read_matrix_keypad@once:	
   808  0079                     	ds	1
   809                           
   810                           	psect	bssBANK0
   811  0020                     __pbssBANK0:	
   812  0020                     set_temp@temp:	
   813  0020                     	ds	2
   814  0022                     set_temp@key_count:	
   815  0022                     	ds	2
   816  0024                     set_temp@blink:	
   817  0024                     	ds	2
   818  0026                     set_temp@wait:	
   819  0026                     	ds	2
   820  0028                     set_time@key_count:	
   821  0028                     	ds	2
   822  002A                     set_time@blink_pos:	
   823  002A                     	ds	2
   824  002C                     set_time@blink:	
   825  002C                     	ds	2
   826  002E                     set_time@wait:	
   827  002E                     	ds	2
   828  0030                     _heat_flag:	
   829  0030                     	ds	2
   830  0032                     _flag:	
   831  0032                     	ds	2
   832  0034                     _ret:	
   833  0034                     	ds	2
   834  0036                     _sec:	
   835  0036                     	ds	2
   836  0038                     _min:	
   837  0038                     	ds	2
   838  003A                     _reset_flag:	
   839  003A                     	ds	2
   840  003C                     _operation_mode:	
   841  003C                     	ds	2
   842  003E                     _min_arr:	
   843  003E                     	ds	3
   844  0041                     _sec_arr:	
   845  0041                     	ds	3
   846                           
   847                           	psect	clrtext
   848  0C41                     clear_ram0:	
   849                           ;	Called with FSR containing the base address, and
   850                           ;	W with the last address+1
   851                           
   852  0C41  0064               	clrwdt	;clear the watchdog before getting into this loop
   853  0C42                     clrloop0:	
   854  0C42  0180               	clrf	0	;clear RAM location pointed to by FSR
   855  0C43  0A84               	incf	4,f	;increment pointer
   856  0C44  0604               	xorwf	4,w	;XOR with final address
   857  0C45  1903               	btfsc	3,2	;have we reached the end yet?
   858  0C46  3400               	retlw	0	;all done for this memory range, return
   859  0C47  0604               	xorwf	4,w	;XOR again to restore value
   860  0C48  2C42               	goto	clrloop0	;do the next byte
   861                           
   862                           	psect	cstackCOMMON
   863  0070                     __pcstackCOMMON:	
   864  0070                     ?_init_timer2:	
   865  0070                     ?_power_on:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_clear_dis:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_mode_select:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ?_modes_display:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_time_dis:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ?_set_time:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_set_temp:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ?_init_matrix_keypad:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_scan_keypad:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ?_read_matrix_keypad:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_init_display_controller:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_init_clcd:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_init_config:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_main:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_door_status_check:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_isr:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ??_isr:	
   914                           ; 1 bytes @ 0x0
   915                           
   916                           
   917                           ; 1 bytes @ 0x0
   918  0070                     	ds	4
   919  0074                     ??_init_timer2:	
   920  0074                     ??_init_matrix_keypad:	
   921                           ; 1 bytes @ 0x4
   922                           
   923  0074                     ??_scan_keypad:	
   924                           ; 1 bytes @ 0x4
   925                           
   926  0074                     ?_clcd_write:	
   927                           ; 1 bytes @ 0x4
   928                           
   929  0074                     ??___wmul:	
   930                           ; 1 bytes @ 0x4
   931                           
   932  0074                     ??___awdiv:	
   933                           ; 1 bytes @ 0x4
   934                           
   935  0074                     clcd_write@mode:	
   936                           ; 1 bytes @ 0x4
   937                           
   938  0074                     scan_keypad@i:	
   939                           ; 1 bytes @ 0x4
   940                           
   941  0074                     ___wmul@product:	
   942                           ; 2 bytes @ 0x4
   943                           
   944                           
   945                           ; 2 bytes @ 0x4
   946  0074                     	ds	1
   947  0075                     ??_clcd_write:	
   948  0075                     ??___awmod:	
   949                           ; 1 bytes @ 0x5
   950                           
   951                           
   952                           ; 1 bytes @ 0x5
   953  0075                     	ds	1
   954  0076                     ??_read_matrix_keypad:	
   955                           
   956                           ; 1 bytes @ 0x6
   957  0076                     	ds	1
   958  0077                     ??_clear_dis:	
   959  0077                     ??_init_clcd:	
   960                           ; 1 bytes @ 0x7
   961                           
   962  0077                     ??_clcd_putch:	
   963                           ; 1 bytes @ 0x7
   964                           
   965  0077                     ??_clcd_print:	
   966                           ; 1 bytes @ 0x7
   967                           
   968  0077                     ??_init_config:	
   969                           ; 1 bytes @ 0x7
   970                           
   971                           
   972                           	psect	cstackBANK0
   973  0044                     __pcstackBANK0:	
   974                           ; 1 bytes @ 0x7
   975                           
   976  0044                     ?___wmul:	
   977  0044                     ?___awdiv:	
   978                           ; 2 bytes @ 0x0
   979                           
   980  0044                     read_matrix_keypad@mode:	
   981                           ; 2 bytes @ 0x0
   982                           
   983  0044                     clcd_write@byte:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0044                     ___wmul@multiplier:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0044                     ___awdiv@divisor:	
   990                           ; 2 bytes @ 0x0
   991                           
   992                           
   993                           ; 2 bytes @ 0x0
   994  0044                     	ds	1
   995  0045                     ??_init_display_controller:	
   996  0045                     ?_clcd_print:	
   997                           ; 1 bytes @ 0x1
   998                           
   999  0045                     read_matrix_keypad@key:	
  1000                           ; 1 bytes @ 0x1
  1001                           
  1002  0045                     clcd_print@str:	
  1003                           ; 1 bytes @ 0x1
  1004                           
  1005                           
  1006                           ; 2 bytes @ 0x1
  1007  0045                     	ds	1
  1008  0046                     ___wmul@multiplicand:	
  1009  0046                     ___awdiv@dividend:	
  1010                           ; 2 bytes @ 0x2
  1011                           
  1012                           
  1013                           ; 2 bytes @ 0x2
  1014  0046                     	ds	1
  1015  0047                     clcd_print@addr:	
  1016                           
  1017                           ; 1 bytes @ 0x3
  1018  0047                     	ds	1
  1019  0048                     ??_modes_display:	
  1020  0048                     ??_door_status_check:	
  1021                           ; 1 bytes @ 0x4
  1022                           
  1023  0048                     ___awdiv@counter:	
  1024                           ; 1 bytes @ 0x4
  1025                           
  1026                           
  1027                           ; 1 bytes @ 0x4
  1028  0048                     	ds	1
  1029  0049                     ___awdiv@sign:	
  1030                           
  1031                           ; 1 bytes @ 0x5
  1032  0049                     	ds	1
  1033  004A                     ___awdiv@quotient:	
  1034                           
  1035                           ; 2 bytes @ 0x6
  1036  004A                     	ds	2
  1037  004C                     ?___awmod:	
  1038  004C                     ___awmod@divisor:	
  1039                           ; 2 bytes @ 0x8
  1040                           
  1041                           
  1042                           ; 2 bytes @ 0x8
  1043  004C                     	ds	2
  1044  004E                     ___awmod@dividend:	
  1045                           
  1046                           ; 2 bytes @ 0xA
  1047  004E                     	ds	2
  1048  0050                     ___awmod@counter:	
  1049                           
  1050                           ; 1 bytes @ 0xC
  1051  0050                     	ds	1
  1052  0051                     ___awmod@sign:	
  1053                           
  1054                           ; 1 bytes @ 0xD
  1055  0051                     	ds	1
  1056  0052                     ??_set_time:	
  1057  0052                     ?_clcd_putch:	
  1058                           ; 1 bytes @ 0xE
  1059                           
  1060  0052                     clcd_putch@addr:	
  1061                           ; 1 bytes @ 0xE
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0xE
  1065  0052                     	ds	1
  1066  0053                     clcd_putch@data:	
  1067                           
  1068                           ; 1 bytes @ 0xF
  1069  0053                     	ds	1
  1070  0054                     ??_power_on:	
  1071  0054                     ??_time_dis:	
  1072                           ; 1 bytes @ 0x10
  1073                           
  1074  0054                     ??_set_temp:	
  1075                           ; 1 bytes @ 0x10
  1076                           
  1077  0054                     set_time@key:	
  1078                           ; 1 bytes @ 0x10
  1079                           
  1080                           
  1081                           ; 1 bytes @ 0x10
  1082  0054                     	ds	3
  1083  0057                     set_temp@key:	
  1084  0057                     power_on@i:	
  1085                           ; 1 bytes @ 0x13
  1086                           
  1087                           
  1088                           ; 2 bytes @ 0x13
  1089  0057                     	ds	1
  1090  0058                     ??_mode_select:	
  1091                           
  1092                           ; 1 bytes @ 0x14
  1093  0058                     	ds	1
  1094  0059                     power_on@i_138:	
  1095                           
  1096                           ; 2 bytes @ 0x15
  1097  0059                     	ds	1
  1098  005A                     mode_select@key:	
  1099                           
  1100                           ; 1 bytes @ 0x16
  1101  005A                     	ds	1
  1102  005B                     ??_main:	
  1103                           
  1104                           ; 1 bytes @ 0x17
  1105  005B                     	ds	3
  1106  005E                     main@key:	
  1107                           
  1108                           ; 1 bytes @ 0x1A
  1109  005E                     	ds	1
  1110                           
  1111                           	psect	maintext
  1112  0405                     __pmaintext:	
  1113 ;;
  1114 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1115 ;;
  1116 ;; *************** function _main *****************
  1117 ;; Defined at:
  1118 ;;		line 39 in file "main.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;		None
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;  key             1   26[BANK0 ] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : B00/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1132 ;;      Params:         0       0       0       0       0
  1133 ;;      Locals:         0       1       0       0       0
  1134 ;;      Temps:          0       3       0       0       0
  1135 ;;      Totals:         0       4       0       0       0
  1136 ;;Total ram usage:        4 bytes
  1137 ;; Hardware stack levels required when called:    6
  1138 ;; This function calls:
  1139 ;;		_clcd_print
  1140 ;;		_clcd_write
  1141 ;;		_clear_dis
  1142 ;;		_init_config
  1143 ;;		_mode_select
  1144 ;;		_power_on
  1145 ;;		_read_matrix_keypad
  1146 ;; This function is called by:
  1147 ;;		Startup code after reset
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           
  1152                           ;psect for function _main
  1153  0405                     _main:	
  1154                           
  1155                           ;main.c: 40: unsigned char key;
  1156                           ;main.c: 41: init_config();
  1157                           
  1158                           ;incstack = 0
  1159                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1160  0405  120A  158A  2475  120A  118A  	fcall	_init_config
  1161                           
  1162                           ;main.c: 42: power_on();
  1163  040A  120A  158A  26E8  120A  118A  	fcall	_power_on
  1164                           
  1165                           ;main.c: 43: clear_dis();
  1166  040F  120A  158A  243B  120A  118A  	fcall	_clear_dis
  1167                           
  1168                           ;main.c: 44: operation_mode = 0x01;
  1169  0414  3001               	movlw	1
  1170  0415  1283               	bcf	3,5	;RP0=0, select bank0
  1171  0416  1303               	bcf	3,6	;RP1=0, select bank0
  1172  0417  00BC               	movwf	_operation_mode
  1173  0418  3000               	movlw	0
  1174  0419  00BD               	movwf	_operation_mode+1
  1175  041A                     l3038:	
  1176                           ;main.c: 47: while(1)
  1177                           
  1178                           
  1179                           ;main.c: 48: {
  1180                           ;main.c: 49: key = read_matrix_keypad(1);
  1181  041A  3001               	movlw	1
  1182  041B  120A  158A  2491  120A  118A  	fcall	_read_matrix_keypad
  1183  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1184  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1185  0422  00DB               	movwf	??_main
  1186  0423  085B               	movf	??_main,w
  1187  0424  00DE               	movwf	main@key
  1188                           
  1189                           ;main.c: 50: if(operation_mode == 0x02 || operation_mode == 0X03 || operation_mode == 0x
      +                          04)
  1190  0425  3002               	movlw	2
  1191  0426  063C               	xorwf	_operation_mode,w
  1192  0427  043D               	iorwf	_operation_mode+1,w
  1193  0428  1903               	btfsc	3,2
  1194  0429  2CEA               	goto	l3116
  1195  042A  3003               	movlw	3
  1196  042B  063C               	xorwf	_operation_mode,w
  1197  042C  043D               	iorwf	_operation_mode+1,w
  1198  042D  1903               	btfsc	3,2
  1199  042E  2CEA               	goto	l3116
  1200  042F  3004               	movlw	4
  1201  0430  063C               	xorwf	_operation_mode,w
  1202  0431  043D               	iorwf	_operation_mode+1,w
  1203  0432  1903               	btfsc	3,2
  1204  0433  2CEA               	goto	l3116
  1205                           
  1206                           ;main.c: 55: else if(key == 1)
  1207                           
  1208                           ;main.c: 51: {
  1209                           ;main.c: 52: ;
  1210                           ;main.c: 53: }
  1211  0434  035E               	decf	main@key,w
  1212  0435  1D03               	btfss	3,2
  1213  0436  2C69               	goto	l3060
  1214                           
  1215                           ;main.c: 56: {
  1216                           ;main.c: 57: operation_mode = 0x02;
  1217  0437  3002               	movlw	2
  1218  0438  00BC               	movwf	_operation_mode
  1219  0439  3000               	movlw	0
  1220  043A  00BD               	movwf	_operation_mode+1
  1221                           
  1222                           ;main.c: 58: reset_flag = 0x11;
  1223  043B  3011               	movlw	17
  1224  043C  00BA               	movwf	_reset_flag
  1225  043D  3000               	movlw	0
  1226  043E  00BB               	movwf	_reset_flag+1
  1227                           
  1228                           ;main.c: 59: clcd_write(0x0C, 0);
  1229  043F  01F4               	clrf	clcd_write@mode
  1230  0440  300C               	movlw	12
  1231  0441  120A  158A  24D6  120A  118A  	fcall	_clcd_write
  1232                           
  1233                           ;main.c: 60: clear_dis();
  1234  0446  120A  158A  243B  120A  118A  	fcall	_clear_dis
  1235                           
  1236                           ;main.c: 62: clcd_print(" Power = 900W   ", (0xC0 + 0));
  1237  044B  3033               	movlw	low (STR_1| (0+32768))
  1238  044C  1283               	bcf	3,5	;RP0=0, select bank0
  1239  044D  1303               	bcf	3,6	;RP1=0, select bank0
  1240  044E  00C5               	movwf	clcd_print@str
  1241  044F  3085               	movlw	high (STR_1| (0+32768))
  1242  0450  00C6               	movwf	clcd_print@str+1
  1243  0451  30C0               	movlw	192
  1244  0452  00DB               	movwf	??_main
  1245  0453  085B               	movf	??_main,w
  1246  0454  00C7               	movwf	clcd_print@addr
  1247  0455  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  1248                           
  1249                           ;main.c: 64: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1250  045A  304D               	movlw	77
  1251  045B  1283               	bcf	3,5	;RP0=0, select bank0
  1252  045C  1303               	bcf	3,6	;RP1=0, select bank0
  1253  045D  00DD               	movwf	??_main+2
  1254  045E  3019               	movlw	25
  1255  045F  00DC               	movwf	??_main+1
  1256  0460  304F               	movlw	79
  1257  0461  00DB               	movwf	??_main
  1258  0462                     u3147:	
  1259  0462  0BDB               	decfsz	??_main,f
  1260  0463  2C62               	goto	u3147
  1261  0464  0BDC               	decfsz	??_main+1,f
  1262  0465  2C62               	goto	u3147
  1263  0466  0BDD               	decfsz	??_main+2,f
  1264  0467  2C62               	goto	u3147
  1265  0468  2CE5               	goto	L4
  1266  0469                     l3060:	
  1267                           ;main.c: 66: }
  1268                           
  1269                           ;main.c: 65: clear_dis();
  1270                           
  1271                           
  1272                           ;main.c: 67: else if(key == 2) {
  1273  0469  3002               	movlw	2
  1274  046A  1283               	bcf	3,5	;RP0=0, select bank0
  1275  046B  1303               	bcf	3,6	;RP1=0, select bank0
  1276  046C  065E               	xorwf	main@key,w
  1277  046D  1D03               	btfss	3,2
  1278  046E  2C7C               	goto	l3068
  1279                           
  1280                           ;main.c: 68: clear_dis();
  1281  046F  120A  158A  243B  120A  118A  	fcall	_clear_dis
  1282                           
  1283                           ;main.c: 69: operation_mode = 0X03;
  1284  0474  3003               	movlw	3
  1285  0475  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0476  1303               	bcf	3,6	;RP1=0, select bank0
  1287  0477  00BC               	movwf	_operation_mode
  1288  0478  3000               	movlw	0
  1289  0479  00BD               	movwf	_operation_mode+1
  1290                           
  1291                           ;main.c: 70: reset_flag = 0x12;
  1292  047A  3012               	movlw	18
  1293  047B  2C8C               	goto	L1
  1294  047C                     l3068:	
  1295                           ;main.c: 72: }
  1296                           
  1297                           
  1298                           ;main.c: 73: else if(key == 3) {
  1299  047C  3003               	movlw	3
  1300  047D  065E               	xorwf	main@key,w
  1301  047E  1D03               	btfss	3,2
  1302  047F  2C90               	goto	l3076
  1303                           
  1304                           ;main.c: 74: clear_dis();
  1305  0480  120A  158A  243B  120A  118A  	fcall	_clear_dis
  1306                           
  1307                           ;main.c: 75: operation_mode = 0x04;
  1308  0485  3004               	movlw	4
  1309  0486  1283               	bcf	3,5	;RP0=0, select bank0
  1310  0487  1303               	bcf	3,6	;RP1=0, select bank0
  1311  0488  00BC               	movwf	_operation_mode
  1312  0489  3000               	movlw	0
  1313  048A  00BD               	movwf	_operation_mode+1
  1314                           
  1315                           ;main.c: 76: reset_flag = 0x14;
  1316  048B  3014               	movlw	20
  1317  048C                     L1:	
  1318  048C  00BA               	movwf	_reset_flag
  1319  048D  3000               	movlw	0
  1320  048E  00BB               	movwf	_reset_flag+1
  1321                           
  1322                           ;main.c: 77: }
  1323  048F  2CEA               	goto	l3116
  1324  0490                     l3076:	
  1325                           
  1326                           ;main.c: 78: else if(key == 4) {
  1327  0490  3004               	movlw	4
  1328  0491  065E               	xorwf	main@key,w
  1329  0492  1D03               	btfss	3,2
  1330  0493  2CD4               	goto	l3106
  1331                           
  1332                           ;main.c: 79: if(operation_mode == 0x01)
  1333  0494  033C               	decf	_operation_mode,w
  1334  0495  043D               	iorwf	_operation_mode+1,w
  1335  0496  1D03               	btfss	3,2
  1336  0497  2CA2               	goto	l3090
  1337                           
  1338                           ;main.c: 80: {
  1339                           ;main.c: 81: min = 0;
  1340  0498  01B8               	clrf	_min
  1341  0499  01B9               	clrf	_min+1
  1342                           
  1343                           ;main.c: 82: sec = 30;
  1344  049A  301E               	movlw	30
  1345  049B  00B6               	movwf	_sec
  1346  049C  3000               	movlw	0
  1347  049D  00B7               	movwf	_sec+1
  1348                           
  1349                           ;main.c: 83: TMR2ON = 1;
  1350  049E  1512               	bsf	18,2	;volatile
  1351                           
  1352                           ;main.c: 84: RC2 = 1;
  1353  049F  1507               	bsf	7,2	;volatile
  1354                           
  1355                           ;main.c: 85: operation_mode = 0x06;
  1356  04A0  3006               	movlw	6
  1357  04A1  2CD9               	goto	L3
  1358  04A2                     l3090:	
  1359                           ;main.c: 86: }
  1360                           
  1361                           
  1362                           ;main.c: 88: else if(operation_mode == 0x06)
  1363  04A2  3006               	movlw	6
  1364  04A3  063C               	xorwf	_operation_mode,w
  1365  04A4  043D               	iorwf	_operation_mode+1,w
  1366  04A5  1D03               	btfss	3,2
  1367  04A6  2CCB               	goto	l3100
  1368                           
  1369                           ;main.c: 89: {
  1370                           ;main.c: 90: sec = sec + 30;
  1371  04A7  0836               	movf	_sec,w
  1372  04A8  3E1E               	addlw	30
  1373  04A9  00B6               	movwf	_sec
  1374  04AA  0837               	movf	_sec+1,w
  1375  04AB  1803               	skipnc
  1376  04AC  3E01               	addlw	1
  1377  04AD  3E00               	addlw	0
  1378  04AE  00B7               	movwf	_sec+1
  1379                           
  1380                           ;main.c: 91: if(sec >= 60)
  1381  04AF  0837               	movf	_sec+1,w
  1382  04B0  3A80               	xorlw	128
  1383  04B1  00FF               	movwf	127
  1384  04B2  3080               	movlw	128
  1385  04B3  027F               	subwf	127,w
  1386  04B4  1D03               	skipz
  1387  04B5  2CB8               	goto	u3105
  1388  04B6  303C               	movlw	60
  1389  04B7  0236               	subwf	_sec,w
  1390  04B8                     u3105:	
  1391  04B8  1C03               	skipc
  1392  04B9  2CEA               	goto	l3116
  1393                           
  1394                           ;main.c: 92: {
  1395                           ;main.c: 93: min++;
  1396  04BA  3001               	movlw	1
  1397  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  1398  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  1399  04BD  07B8               	addwf	_min,f
  1400  04BE  1803               	skipnc
  1401  04BF  0AB9               	incf	_min+1,f
  1402  04C0  3000               	movlw	0
  1403  04C1  07B9               	addwf	_min+1,f
  1404                           
  1405                           ;main.c: 94: sec = sec - 60;
  1406  04C2  0836               	movf	_sec,w
  1407  04C3  3EC4               	addlw	196
  1408  04C4  00B6               	movwf	_sec
  1409  04C5  0837               	movf	_sec+1,w
  1410  04C6  1803               	skipnc
  1411  04C7  3E01               	addlw	1
  1412  04C8  3EFF               	addlw	255
  1413  04C9  00B7               	movwf	_sec+1
  1414                           
  1415                           ;main.c: 95: }
  1416                           ;main.c: 96: }
  1417  04CA  2CEA               	goto	l3116
  1418  04CB                     l3100:	
  1419                           
  1420                           ;main.c: 97: else if(operation_mode == 0x08)
  1421  04CB  3008               	movlw	8
  1422  04CC  063C               	xorwf	_operation_mode,w
  1423  04CD  043D               	iorwf	_operation_mode+1,w
  1424  04CE  1D03               	btfss	3,2
  1425  04CF  2CEA               	goto	l3116
  1426                           
  1427                           ;main.c: 98: {
  1428                           ;main.c: 99: TMR2ON = 1;
  1429  04D0  1512               	bsf	18,2	;volatile
  1430                           
  1431                           ;main.c: 100: RC2 = 1;
  1432  04D1  1507               	bsf	7,2	;volatile
  1433                           
  1434                           ;main.c: 101: operation_mode = 0x05;
  1435  04D2  3005               	movlw	5
  1436  04D3  2CD9               	goto	L3
  1437  04D4                     l3106:	
  1438                           ;main.c: 102: }
  1439                           ;main.c: 104: }
  1440                           
  1441                           
  1442                           ;main.c: 105: else if(key == 5) {
  1443  04D4  3005               	movlw	5
  1444  04D5  065E               	xorwf	main@key,w
  1445  04D6  1D03               	btfss	3,2
  1446  04D7  2CDD               	goto	l3110
  1447                           
  1448                           ;main.c: 106: operation_mode = 0x08;
  1449  04D8  3008               	movlw	8
  1450  04D9                     L3:	
  1451  04D9  00BC               	movwf	_operation_mode
  1452  04DA  3000               	movlw	0
  1453  04DB  00BD               	movwf	_operation_mode+1
  1454                           
  1455                           ;main.c: 107: }
  1456  04DC  2CEA               	goto	l3116
  1457  04DD                     l3110:	
  1458                           
  1459                           ;main.c: 108: else if(key == 6) {
  1460  04DD  3006               	movlw	6
  1461  04DE  065E               	xorwf	main@key,w
  1462  04DF  1D03               	btfss	3,2
  1463  04E0  2CEA               	goto	l3116
  1464                           
  1465                           ;main.c: 109: operation_mode = 0x07;
  1466  04E1  3007               	movlw	7
  1467  04E2  00BC               	movwf	_operation_mode
  1468  04E3  3000               	movlw	0
  1469  04E4  00BD               	movwf	_operation_mode+1
  1470  04E5                     L4:	
  1471                           
  1472                           ;main.c: 110: clear_dis();
  1473  04E5  120A  158A  243B  120A  118A  	fcall	_clear_dis
  1474  04EA                     l3116:	
  1475                           
  1476                           ;main.c: 111: }
  1477                           ;main.c: 113: mode_select(key);
  1478  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1479  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1480  04EC  085E               	movf	main@key,w
  1481  04ED  120A  118A  2732  120A  118A  	fcall	_mode_select
  1482  04F2  2C1A               	goto	l3038
  1483  04F3                     __end_of_main:	
  1484                           
  1485                           	psect	text1
  1486  0C91                     __ptext1:	
  1487 ;; *************** function _read_matrix_keypad *****************
  1488 ;; Defined at:
  1489 ;;		line 108 in file "matrix_keypad.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  mode            1    wreg     unsigned char 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  mode            1    0[BANK0 ] unsigned char 
  1494 ;;  key             1    1[BANK0 ] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      unsigned char 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, pclath, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         0       0       0       0       0
  1505 ;;      Locals:         0       2       0       0       0
  1506 ;;      Temps:          1       0       0       0       0
  1507 ;;      Totals:         1       2       0       0       0
  1508 ;;Total ram usage:        3 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    2
  1511 ;; This function calls:
  1512 ;;		_scan_keypad
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _read_matrix_keypad
  1520  0C91                     _read_matrix_keypad:	
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in _read_matrix_keypad: [wreg+status,2+status,0+pclath+cstack]
  1524                           ;read_matrix_keypad@mode stored from wreg
  1525  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0C93  00C4               	movwf	read_matrix_keypad@mode
  1528                           
  1529                           ;matrix_keypad.c: 110: static unsigned char once = 1;
  1530                           ;matrix_keypad.c: 111: unsigned char key;
  1531                           ;matrix_keypad.c: 113: key = scan_keypad();
  1532  0C94  120A  158A  2774  120A  158A  	fcall	_scan_keypad
  1533  0C99  00F6               	movwf	??_read_matrix_keypad
  1534  0C9A  0876               	movf	??_read_matrix_keypad,w
  1535  0C9B  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0C9C  1303               	bcf	3,6	;RP1=0, select bank0
  1537  0C9D  00C5               	movwf	read_matrix_keypad@key
  1538                           
  1539                           ;matrix_keypad.c: 115: if (mode == 0)
  1540  0C9E  0844               	movf	read_matrix_keypad@mode,w
  1541  0C9F  1D03               	btfss	3,2
  1542  0CA0  2CA3               	goto	l2918
  1543                           
  1544                           ;matrix_keypad.c: 116: {
  1545                           ;matrix_keypad.c: 117: return key;
  1546  0CA1  0845               	movf	read_matrix_keypad@key,w
  1547  0CA2  0008               	return
  1548  0CA3                     l2918:	
  1549                           ;matrix_keypad.c: 118: }
  1550                           
  1551                           
  1552                           ;matrix_keypad.c: 119: else
  1553                           ;matrix_keypad.c: 120: {
  1554                           ;matrix_keypad.c: 121: if ((key != 0xFF) && once)
  1555  0CA3  0A45               	incf	read_matrix_keypad@key,w
  1556  0CA4  1903               	btfsc	3,2
  1557  0CA5  2CAC               	goto	l2930
  1558  0CA6  0879               	movf	read_matrix_keypad@once,w
  1559  0CA7  1903               	btfsc	3,2
  1560  0CA8  2CAC               	goto	l2930
  1561                           
  1562                           ;matrix_keypad.c: 122: {
  1563                           ;matrix_keypad.c: 123: once = 0;
  1564  0CA9  01F9               	clrf	read_matrix_keypad@once
  1565                           
  1566                           ;matrix_keypad.c: 124: return key;
  1567  0CAA  0845               	movf	read_matrix_keypad@key,w
  1568  0CAB  0008               	return
  1569  0CAC                     l2930:	
  1570                           ;matrix_keypad.c: 125: }
  1571                           
  1572                           
  1573                           ;matrix_keypad.c: 127: else if (key == 0xFF)
  1574  0CAC  0A45               	incf	read_matrix_keypad@key,w
  1575  0CAD  1D03               	btfss	3,2
  1576  0CAE  2CB1               	goto	l2934
  1577                           
  1578                           ;matrix_keypad.c: 128: {
  1579                           ;matrix_keypad.c: 129: once = 1;
  1580  0CAF  01F9               	clrf	read_matrix_keypad@once
  1581  0CB0  0AF9               	incf	read_matrix_keypad@once,f
  1582  0CB1                     l2934:	
  1583                           
  1584                           ;matrix_keypad.c: 130: }
  1585                           ;matrix_keypad.c: 131: }
  1586                           ;matrix_keypad.c: 133: return 0xFF;
  1587  0CB1  30FF               	movlw	255
  1588  0CB2  0008               	return
  1589  0CB3                     __end_of_read_matrix_keypad:	
  1590                           
  1591                           	psect	text2
  1592  0F74                     __ptext2:	
  1593 ;; *************** function _scan_keypad *****************
  1594 ;; Defined at:
  1595 ;;		line 21 in file "matrix_keypad.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  i               2    4[COMMON] int 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      unsigned char 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1609 ;;      Params:         0       0       0       0       0
  1610 ;;      Locals:         2       0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0
  1612 ;;      Totals:         2       0       0       0       0
  1613 ;;Total ram usage:        2 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    1
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_read_matrix_keypad
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function _scan_keypad
  1625  0F74                     _scan_keypad:	
  1626                           
  1627                           ;matrix_keypad.c: 23: int i;
  1628                           ;matrix_keypad.c: 25: RD3 = 0;
  1629                           
  1630                           ;incstack = 0
  1631                           ; Regs used in _scan_keypad: [wreg+status,2+status,0]
  1632  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  1634  0F76  1188               	bcf	8,3	;volatile
  1635                           
  1636                           ;matrix_keypad.c: 26: RD2 = 1;
  1637  0F77  1508               	bsf	8,2	;volatile
  1638                           
  1639                           ;matrix_keypad.c: 27: RD1 = 1;
  1640  0F78  1488               	bsf	8,1	;volatile
  1641                           
  1642                           ;matrix_keypad.c: 28: RD0 = 1;
  1643  0F79  1408               	bsf	8,0	;volatile
  1644                           
  1645                           ;matrix_keypad.c: 30: for (i = 100; i--; );
  1646  0F7A  3064               	movlw	100
  1647  0F7B  00F4               	movwf	scan_keypad@i
  1648  0F7C  3000               	movlw	0
  1649  0F7D  00F5               	movwf	scan_keypad@i+1
  1650  0F7E                     l2560:	
  1651  0F7E  30FF               	movlw	255
  1652  0F7F  07F4               	addwf	scan_keypad@i,f
  1653  0F80  1803               	skipnc
  1654  0F81  0AF5               	incf	scan_keypad@i+1,f
  1655  0F82  30FF               	movlw	255
  1656  0F83  07F5               	addwf	scan_keypad@i+1,f
  1657  0F84  0A74               	incf	scan_keypad@i,w
  1658  0F85  1D03               	skipz
  1659  0F86  2F7E               	goto	l2560
  1660  0F87  0A75               	incf	scan_keypad@i+1,w
  1661  0F88  1D03               	btfss	3,2
  1662  0F89  2F7E               	goto	l2560
  1663                           
  1664                           ;matrix_keypad.c: 32: if (RB0 == 0)
  1665  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  1666  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  1667  0F8C  1806               	btfsc	6,0	;volatile
  1668  0F8D  2F90               	goto	l29
  1669                           
  1670                           ;matrix_keypad.c: 33: {
  1671                           ;matrix_keypad.c: 34: return 1;
  1672  0F8E  3001               	movlw	1
  1673  0F8F  0008               	return
  1674  0F90                     l29:	
  1675                           ;matrix_keypad.c: 35: }
  1676                           
  1677                           
  1678                           ;matrix_keypad.c: 36: else if (RB1 == 0)
  1679  0F90  1886               	btfsc	6,1	;volatile
  1680  0F91  2F94               	goto	l32
  1681                           
  1682                           ;matrix_keypad.c: 37: {
  1683                           ;matrix_keypad.c: 38: return 2;
  1684  0F92  3002               	movlw	2
  1685  0F93  0008               	return
  1686  0F94                     l32:	
  1687                           ;matrix_keypad.c: 39: }
  1688                           
  1689                           
  1690                           ;matrix_keypad.c: 40: else if (RB2 == 0)
  1691  0F94  1906               	btfsc	6,2	;volatile
  1692  0F95  2F98               	goto	l31
  1693                           
  1694                           ;matrix_keypad.c: 41: {
  1695                           ;matrix_keypad.c: 42: return 3;
  1696  0F96  3003               	movlw	3
  1697  0F97  0008               	return
  1698  0F98                     l31:	
  1699                           
  1700                           ;matrix_keypad.c: 43: }
  1701                           ;matrix_keypad.c: 45: RD3 = 1;
  1702  0F98  1588               	bsf	8,3	;volatile
  1703                           
  1704                           ;matrix_keypad.c: 46: RD2 = 0;
  1705  0F99  1108               	bcf	8,2	;volatile
  1706                           
  1707                           ;matrix_keypad.c: 47: RD1 = 1;
  1708  0F9A  1488               	bsf	8,1	;volatile
  1709                           
  1710                           ;matrix_keypad.c: 48: RD0 = 1;
  1711  0F9B  1408               	bsf	8,0	;volatile
  1712                           
  1713                           ;matrix_keypad.c: 50: for (i = 100; i--; );
  1714  0F9C  3064               	movlw	100
  1715  0F9D  00F4               	movwf	scan_keypad@i
  1716  0F9E  3000               	movlw	0
  1717  0F9F  00F5               	movwf	scan_keypad@i+1
  1718  0FA0                     l2580:	
  1719  0FA0  30FF               	movlw	255
  1720  0FA1  07F4               	addwf	scan_keypad@i,f
  1721  0FA2  1803               	skipnc
  1722  0FA3  0AF5               	incf	scan_keypad@i+1,f
  1723  0FA4  30FF               	movlw	255
  1724  0FA5  07F5               	addwf	scan_keypad@i+1,f
  1725  0FA6  0A74               	incf	scan_keypad@i,w
  1726  0FA7  1D03               	skipz
  1727  0FA8  2FA0               	goto	l2580
  1728  0FA9  0A75               	incf	scan_keypad@i+1,w
  1729  0FAA  1D03               	btfss	3,2
  1730  0FAB  2FA0               	goto	l2580
  1731                           
  1732                           ;matrix_keypad.c: 52: if (RB0 == 0)
  1733  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  1734  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  1735  0FAE  1806               	btfsc	6,0	;volatile
  1736  0FAF  2FB2               	goto	l38
  1737                           
  1738                           ;matrix_keypad.c: 53: {
  1739                           ;matrix_keypad.c: 54: return 4;
  1740  0FB0  3004               	movlw	4
  1741  0FB1  0008               	return
  1742  0FB2                     l38:	
  1743                           ;matrix_keypad.c: 55: }
  1744                           
  1745                           
  1746                           ;matrix_keypad.c: 56: else if (RB1 == 0)
  1747  0FB2  1886               	btfsc	6,1	;volatile
  1748  0FB3  2FB6               	goto	l40
  1749                           
  1750                           ;matrix_keypad.c: 57: {
  1751                           ;matrix_keypad.c: 58: return 5;
  1752  0FB4  3005               	movlw	5
  1753  0FB5  0008               	return
  1754  0FB6                     l40:	
  1755                           ;matrix_keypad.c: 59: }
  1756                           
  1757                           
  1758                           ;matrix_keypad.c: 60: else if (RB2 == 0)
  1759  0FB6  1906               	btfsc	6,2	;volatile
  1760  0FB7  2FBA               	goto	l39
  1761                           
  1762                           ;matrix_keypad.c: 61: {
  1763                           ;matrix_keypad.c: 62: return 6;
  1764  0FB8  3006               	movlw	6
  1765  0FB9  0008               	return
  1766  0FBA                     l39:	
  1767                           
  1768                           ;matrix_keypad.c: 63: }
  1769                           ;matrix_keypad.c: 65: RD3 = 1;
  1770  0FBA  1588               	bsf	8,3	;volatile
  1771                           
  1772                           ;matrix_keypad.c: 66: RD2 = 1;
  1773  0FBB  1508               	bsf	8,2	;volatile
  1774                           
  1775                           ;matrix_keypad.c: 67: RD1 = 0;
  1776  0FBC  1088               	bcf	8,1	;volatile
  1777                           
  1778                           ;matrix_keypad.c: 68: RD0 = 1;
  1779  0FBD  1408               	bsf	8,0	;volatile
  1780                           
  1781                           ;matrix_keypad.c: 70: for (i = 100; i--; );
  1782  0FBE  3064               	movlw	100
  1783  0FBF  00F4               	movwf	scan_keypad@i
  1784  0FC0  3000               	movlw	0
  1785  0FC1  00F5               	movwf	scan_keypad@i+1
  1786  0FC2                     l2600:	
  1787  0FC2  30FF               	movlw	255
  1788  0FC3  07F4               	addwf	scan_keypad@i,f
  1789  0FC4  1803               	skipnc
  1790  0FC5  0AF5               	incf	scan_keypad@i+1,f
  1791  0FC6  30FF               	movlw	255
  1792  0FC7  07F5               	addwf	scan_keypad@i+1,f
  1793  0FC8  0A74               	incf	scan_keypad@i,w
  1794  0FC9  1D03               	skipz
  1795  0FCA  2FC2               	goto	l2600
  1796  0FCB  0A75               	incf	scan_keypad@i+1,w
  1797  0FCC  1D03               	btfss	3,2
  1798  0FCD  2FC2               	goto	l2600
  1799                           
  1800                           ;matrix_keypad.c: 72: if (RB0 == 0)
  1801  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  1802  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0FD0  1806               	btfsc	6,0	;volatile
  1804  0FD1  2FD4               	goto	l46
  1805                           
  1806                           ;matrix_keypad.c: 73: {
  1807                           ;matrix_keypad.c: 74: return 7;
  1808  0FD2  3007               	movlw	7
  1809  0FD3  0008               	return
  1810  0FD4                     l46:	
  1811                           ;matrix_keypad.c: 75: }
  1812                           
  1813                           
  1814                           ;matrix_keypad.c: 76: else if (RB1 == 0)
  1815  0FD4  1886               	btfsc	6,1	;volatile
  1816  0FD5  2FD8               	goto	l48
  1817                           
  1818                           ;matrix_keypad.c: 77: {
  1819                           ;matrix_keypad.c: 78: return 8;
  1820  0FD6  3008               	movlw	8
  1821  0FD7  0008               	return
  1822  0FD8                     l48:	
  1823                           ;matrix_keypad.c: 79: }
  1824                           
  1825                           
  1826                           ;matrix_keypad.c: 80: else if (RB2 == 0)
  1827  0FD8  1906               	btfsc	6,2	;volatile
  1828  0FD9  2FDC               	goto	l47
  1829                           
  1830                           ;matrix_keypad.c: 81: {
  1831                           ;matrix_keypad.c: 82: return 9;
  1832  0FDA  3009               	movlw	9
  1833  0FDB  0008               	return
  1834  0FDC                     l47:	
  1835                           
  1836                           ;matrix_keypad.c: 83: }
  1837                           ;matrix_keypad.c: 85: RD3 = 1;
  1838  0FDC  1588               	bsf	8,3	;volatile
  1839                           
  1840                           ;matrix_keypad.c: 86: RD2 = 1;
  1841  0FDD  1508               	bsf	8,2	;volatile
  1842                           
  1843                           ;matrix_keypad.c: 87: RD1 = 1;
  1844  0FDE  1488               	bsf	8,1	;volatile
  1845                           
  1846                           ;matrix_keypad.c: 88: RD0 = 0;
  1847  0FDF  1008               	bcf	8,0	;volatile
  1848                           
  1849                           ;matrix_keypad.c: 90: for (i = 100; i--; );
  1850  0FE0  3064               	movlw	100
  1851  0FE1  00F4               	movwf	scan_keypad@i
  1852  0FE2  3000               	movlw	0
  1853  0FE3  00F5               	movwf	scan_keypad@i+1
  1854  0FE4                     l2620:	
  1855  0FE4  30FF               	movlw	255
  1856  0FE5  07F4               	addwf	scan_keypad@i,f
  1857  0FE6  1803               	skipnc
  1858  0FE7  0AF5               	incf	scan_keypad@i+1,f
  1859  0FE8  30FF               	movlw	255
  1860  0FE9  07F5               	addwf	scan_keypad@i+1,f
  1861  0FEA  0A74               	incf	scan_keypad@i,w
  1862  0FEB  1D03               	skipz
  1863  0FEC  2FE4               	goto	l2620
  1864  0FED  0A75               	incf	scan_keypad@i+1,w
  1865  0FEE  1D03               	btfss	3,2
  1866  0FEF  2FE4               	goto	l2620
  1867                           
  1868                           ;matrix_keypad.c: 92: if (RB0 == 0)
  1869  0FF0  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0FF1  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0FF2  1806               	btfsc	6,0	;volatile
  1872  0FF3  2FF6               	goto	l54
  1873                           
  1874                           ;matrix_keypad.c: 93: {
  1875                           ;matrix_keypad.c: 94: return '*';
  1876  0FF4  302A               	movlw	42
  1877  0FF5  0008               	return
  1878  0FF6                     l54:	
  1879                           ;matrix_keypad.c: 95: }
  1880                           
  1881                           
  1882                           ;matrix_keypad.c: 96: else if (RB1 == 0)
  1883  0FF6  1886               	btfsc	6,1	;volatile
  1884  0FF7  2FFA               	goto	l56
  1885                           
  1886                           ;matrix_keypad.c: 97: {
  1887                           ;matrix_keypad.c: 98: return 0;
  1888  0FF8  3000               	movlw	0
  1889  0FF9  0008               	return
  1890  0FFA                     l56:	
  1891                           ;matrix_keypad.c: 99: }
  1892                           
  1893                           
  1894                           ;matrix_keypad.c: 100: else if (RB2 == 0)
  1895  0FFA  1906               	btfsc	6,2	;volatile
  1896  0FFB  2FFE               	goto	l2638
  1897                           
  1898                           ;matrix_keypad.c: 101: {
  1899                           ;matrix_keypad.c: 102: return '#';
  1900  0FFC  3023               	movlw	35
  1901  0FFD  0008               	return
  1902  0FFE                     l2638:	
  1903                           
  1904                           ;matrix_keypad.c: 103: }
  1905                           ;matrix_keypad.c: 105: return 0xFF;
  1906  0FFE  30FF               	movlw	255
  1907  0FFF  0008               	return
  1908  1000                     __end_of_scan_keypad:	
  1909                           
  1910                           	psect	text3
  1911  0EE8                     __ptext3:	
  1912 ;; *************** function _power_on *****************
  1913 ;; Defined at:
  1914 ;;		line 184 in file "main.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;		None
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  i               2   21[BANK0 ] int 
  1919 ;;  i               2   19[BANK0 ] int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1929 ;;      Params:         0       0       0       0       0
  1930 ;;      Locals:         0       4       0       0       0
  1931 ;;      Temps:          0       3       0       0       0
  1932 ;;      Totals:         0       7       0       0       0
  1933 ;;Total ram usage:        7 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    3
  1936 ;; This function calls:
  1937 ;;		_clcd_print
  1938 ;;		_clcd_putch
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           
  1945                           ;psect for function _power_on
  1946  0EE8                     _power_on:	
  1947                           
  1948                           ;main.c: 186: for(int i = 0; i<16; i++)
  1949                           
  1950                           ;incstack = 0
  1951                           ; Regs used in _power_on: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1952  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  1954  0EEA  01D7               	clrf	power_on@i
  1955  0EEB  01D8               	clrf	power_on@i+1
  1956  0EEC  0858               	movf	power_on@i+1,w
  1957  0EED  3A80               	xorlw	128
  1958  0EEE  00FF               	movwf	127
  1959  0EEF  3080               	movlw	128
  1960  0EF0  027F               	subwf	127,w
  1961  0EF1  1D03               	skipz
  1962  0EF2  2EF5               	goto	u2935
  1963  0EF3  3010               	movlw	16
  1964  0EF4  0257               	subwf	power_on@i,w
  1965  0EF5                     u2935:	
  1966  0EF5  1803               	btfsc	3,0
  1967  0EF6  2F17               	goto	l2964
  1968  0EF7                     l2958:	
  1969                           
  1970                           ;main.c: 187: {
  1971                           ;main.c: 188: clcd_putch(0xFF, (0x80 + i));
  1972  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  1973  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  1974  0EF9  0857               	movf	power_on@i,w
  1975  0EFA  3E80               	addlw	128
  1976  0EFB  00D4               	movwf	??_power_on
  1977  0EFC  0854               	movf	??_power_on,w
  1978  0EFD  00D2               	movwf	clcd_putch@addr
  1979  0EFE  30FF               	movlw	255
  1980  0EFF  120A  158A  2462  120A  158A  	fcall	_clcd_putch
  1981  0F04  3001               	movlw	1
  1982  0F05  1283               	bcf	3,5	;RP0=0, select bank0
  1983  0F06  1303               	bcf	3,6	;RP1=0, select bank0
  1984  0F07  07D7               	addwf	power_on@i,f
  1985  0F08  1803               	skipnc
  1986  0F09  0AD8               	incf	power_on@i+1,f
  1987  0F0A  3000               	movlw	0
  1988  0F0B  07D8               	addwf	power_on@i+1,f
  1989  0F0C  0858               	movf	power_on@i+1,w
  1990  0F0D  3A80               	xorlw	128
  1991  0F0E  00FF               	movwf	127
  1992  0F0F  3080               	movlw	128
  1993  0F10  027F               	subwf	127,w
  1994  0F11  1D03               	skipz
  1995  0F12  2F15               	goto	u2945
  1996  0F13  3010               	movlw	16
  1997  0F14  0257               	subwf	power_on@i,w
  1998  0F15                     u2945:	
  1999  0F15  1C03               	skipc
  2000  0F16  2EF7               	goto	l2958
  2001  0F17                     l2964:	
  2002                           
  2003                           ;main.c: 189: }
  2004                           ;main.c: 190: clcd_print("  Powering ON   ", (0xC0 + 0));
  2005  0F17  3022               	movlw	low (STR_2| (0+32768))
  2006  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  2007  0F19  1303               	bcf	3,6	;RP1=0, select bank0
  2008  0F1A  00C5               	movwf	clcd_print@str
  2009  0F1B  3085               	movlw	high (STR_2| (0+32768))
  2010  0F1C  00C6               	movwf	clcd_print@str+1
  2011  0F1D  30C0               	movlw	192
  2012  0F1E  00D4               	movwf	??_power_on
  2013  0F1F  0854               	movf	??_power_on,w
  2014  0F20  00C7               	movwf	clcd_print@addr
  2015  0F21  120A  118A  27CB  120A  158A  	fcall	_clcd_print
  2016                           
  2017                           ;main.c: 191: clcd_print(" Microwave Oven ", (0x90 + 0));
  2018  0F26  3055               	movlw	low (STR_3| (0+32768))
  2019  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  2020  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  2021  0F29  00C5               	movwf	clcd_print@str
  2022  0F2A  3085               	movlw	high (STR_3| (0+32768))
  2023  0F2B  00C6               	movwf	clcd_print@str+1
  2024  0F2C  3090               	movlw	144
  2025  0F2D  00D4               	movwf	??_power_on
  2026  0F2E  0854               	movf	??_power_on,w
  2027  0F2F  00C7               	movwf	clcd_print@addr
  2028  0F30  120A  118A  27CB  120A  158A  	fcall	_clcd_print
  2029                           
  2030                           ;main.c: 192: for(int i = 0; i<16; i++)
  2031  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2032  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2033  0F37  01D9               	clrf	power_on@i_138
  2034  0F38  01DA               	clrf	power_on@i_138+1
  2035  0F39  085A               	movf	power_on@i_138+1,w
  2036  0F3A  3A80               	xorlw	128
  2037  0F3B  00FF               	movwf	127
  2038  0F3C  3080               	movlw	128
  2039  0F3D  027F               	subwf	127,w
  2040  0F3E  1D03               	skipz
  2041  0F3F  2F42               	goto	u2955
  2042  0F40  3010               	movlw	16
  2043  0F41  0259               	subwf	power_on@i_138,w
  2044  0F42                     u2955:	
  2045  0F42  1803               	btfsc	3,0
  2046  0F43  2F64               	goto	l2978
  2047  0F44                     l2972:	
  2048                           
  2049                           ;main.c: 193: {
  2050                           ;main.c: 194: clcd_putch(0xFF, (0xD0 + i));
  2051  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2052  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2053  0F46  0859               	movf	power_on@i_138,w
  2054  0F47  3ED0               	addlw	208
  2055  0F48  00D4               	movwf	??_power_on
  2056  0F49  0854               	movf	??_power_on,w
  2057  0F4A  00D2               	movwf	clcd_putch@addr
  2058  0F4B  30FF               	movlw	255
  2059  0F4C  120A  158A  2462  120A  158A  	fcall	_clcd_putch
  2060  0F51  3001               	movlw	1
  2061  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  2063  0F54  07D9               	addwf	power_on@i_138,f
  2064  0F55  1803               	skipnc
  2065  0F56  0ADA               	incf	power_on@i_138+1,f
  2066  0F57  3000               	movlw	0
  2067  0F58  07DA               	addwf	power_on@i_138+1,f
  2068  0F59  085A               	movf	power_on@i_138+1,w
  2069  0F5A  3A80               	xorlw	128
  2070  0F5B  00FF               	movwf	127
  2071  0F5C  3080               	movlw	128
  2072  0F5D  027F               	subwf	127,w
  2073  0F5E  1D03               	skipz
  2074  0F5F  2F62               	goto	u2965
  2075  0F60  3010               	movlw	16
  2076  0F61  0259               	subwf	power_on@i_138,w
  2077  0F62                     u2965:	
  2078  0F62  1C03               	skipc
  2079  0F63  2F44               	goto	l2972
  2080  0F64                     l2978:	
  2081                           
  2082                           ;main.c: 195: }
  2083                           ;main.c: 196: _delay((unsigned long)((1500)*(20000000/4000.0)));
  2084  0F64  3027               	movlw	39
  2085  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  2086  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  2087  0F67  00D6               	movwf	??_power_on+2
  2088  0F68  300D               	movlw	13
  2089  0F69  00D5               	movwf	??_power_on+1
  2090  0F6A  3025               	movlw	37
  2091  0F6B  00D4               	movwf	??_power_on
  2092  0F6C                     u3157:	
  2093  0F6C  0BD4               	decfsz	??_power_on,f
  2094  0F6D  2F6C               	goto	u3157
  2095  0F6E  0BD5               	decfsz	??_power_on+1,f
  2096  0F6F  2F6C               	goto	u3157
  2097  0F70  0BD6               	decfsz	??_power_on+2,f
  2098  0F71  2F6C               	goto	u3157
  2099  0F72  2F73               	nop2
  2100  0F73  0008               	return
  2101  0F74                     __end_of_power_on:	
  2102                           
  2103                           	psect	text4
  2104  0732                     __ptext4:	
  2105 ;; *************** function _mode_select *****************
  2106 ;; Defined at:
  2107 ;;		line 120 in file "main.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  key             1    wreg     unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  key             1   22[BANK0 ] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2121 ;;      Params:         0       0       0       0       0
  2122 ;;      Locals:         0       1       0       0       0
  2123 ;;      Temps:          0       2       0       0       0
  2124 ;;      Totals:         0       3       0       0       0
  2125 ;;Total ram usage:        3 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    5
  2128 ;; This function calls:
  2129 ;;		_clear_dis
  2130 ;;		_modes_display
  2131 ;;		_set_temp
  2132 ;;		_set_time
  2133 ;;		_time_dis
  2134 ;; This function is called by:
  2135 ;;		_main
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _mode_select
  2141  0732                     _mode_select:	
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _mode_select: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2145                           ;mode_select@key stored from wreg
  2146  0732  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0733  1303               	bcf	3,6	;RP1=0, select bank0
  2148  0734  00DA               	movwf	mode_select@key
  2149                           
  2150                           ;main.c: 121: switch(operation_mode)
  2151  0735  2FA1               	goto	l3018
  2152  0736                     l2982:	
  2153                           ;main.c: 122: {
  2154                           ;main.c: 123: case 0x01:
  2155                           
  2156                           
  2157                           ;main.c: 124: modes_display();
  2158  0736  120A  158A  2544  120A  118A  	fcall	_modes_display
  2159                           
  2160                           ;main.c: 125: break;
  2161  073B  2FC0               	goto	l3020
  2162  073C                     l2984:	
  2163                           ;main.c: 126: case 0x05:
  2164                           
  2165                           
  2166                           ;main.c: 127: case 0x06:
  2167                           ;main.c: 128: time_dis();
  2168  073C  120A  118A  2637  120A  118A  	fcall	_time_dis
  2169                           
  2170                           ;main.c: 129: break;
  2171  0741  2FC0               	goto	l3020
  2172  0742                     l2986:	
  2173                           ;main.c: 130: case 0x02:
  2174                           
  2175                           
  2176                           ;main.c: 131: set_time(key);
  2177  0742  1283               	bcf	3,5	;RP0=0, select bank0
  2178  0743  1303               	bcf	3,6	;RP1=0, select bank0
  2179  0744  085A               	movf	mode_select@key,w
  2180  0745  120A  118A  2028  120A  118A  	fcall	_set_time
  2181                           
  2182                           ;main.c: 132: break;
  2183  074A  2FC0               	goto	l3020
  2184  074B                     l2988:	
  2185                           ;main.c: 133: case 0X03:
  2186                           
  2187                           
  2188                           ;main.c: 134: set_time(key);
  2189  074B  1283               	bcf	3,5	;RP0=0, select bank0
  2190  074C  1303               	bcf	3,6	;RP1=0, select bank0
  2191  074D  085A               	movf	mode_select@key,w
  2192  074E  120A  118A  2028  120A  118A  	fcall	_set_time
  2193                           
  2194                           ;main.c: 135: break;
  2195  0753  2FC0               	goto	l3020
  2196  0754                     l2990:	
  2197                           ;main.c: 136: case 0x04:
  2198                           
  2199                           
  2200                           ;main.c: 137: if(heat_flag == 0)
  2201  0754  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0755  1303               	bcf	3,6	;RP1=0, select bank0
  2203  0756  0830               	movf	_heat_flag,w
  2204  0757  0431               	iorwf	_heat_flag+1,w
  2205  0758  1D03               	btfss	3,2
  2206  0759  2F8E               	goto	l3010
  2207                           
  2208                           ;main.c: 138: {
  2209                           ;main.c: 139: ret = set_temp(key);
  2210  075A  085A               	movf	mode_select@key,w
  2211  075B  120A  118A  221B  120A  118A  	fcall	_set_temp
  2212  0760  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0761  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0762  00D8               	movwf	??_mode_select
  2215  0763  01D9               	clrf	??_mode_select+1
  2216  0764  0858               	movf	??_mode_select,w
  2217  0765  00B4               	movwf	_ret
  2218  0766  0859               	movf	??_mode_select+1,w
  2219  0767  00B5               	movwf	_ret+1
  2220                           
  2221                           ;main.c: 140: if(ret == 1)
  2222  0768  0334               	decf	_ret,w
  2223  0769  0435               	iorwf	_ret+1,w
  2224  076A  1D03               	btfss	3,2
  2225  076B  2F72               	goto	l2998
  2226                           
  2227                           ;main.c: 141: {
  2228                           ;main.c: 142: flag = 1;
  2229  076C  3001               	movlw	1
  2230  076D  00B2               	movwf	_flag
  2231  076E  3000               	movlw	0
  2232  076F  00B3               	movwf	_flag+1
  2233                           
  2234                           ;main.c: 143: reset_flag = 0x14;
  2235  0770  3014               	movlw	20
  2236  0771  2F87               	goto	L5
  2237  0772                     l2998:	
  2238                           ;main.c: 144: }
  2239                           
  2240                           
  2241                           ;main.c: 145: else if(ret == 0)
  2242  0772  0834               	movf	_ret,w
  2243  0773  0435               	iorwf	_ret+1,w
  2244  0774  1D03               	btfss	3,2
  2245  0775  2F8B               	goto	l3008
  2246                           
  2247                           ;main.c: 146: {
  2248                           ;main.c: 147: TMR2ON = 0;
  2249  0776  1112               	bcf	18,2	;volatile
  2250                           
  2251                           ;main.c: 148: flag = 1;
  2252  0777  3001               	movlw	1
  2253  0778  00B2               	movwf	_flag
  2254  0779  3000               	movlw	0
  2255  077A  00B3               	movwf	_flag+1
  2256                           
  2257                           ;main.c: 149: heat_flag = 1;
  2258  077B  3001               	movlw	1
  2259  077C  00B0               	movwf	_heat_flag
  2260  077D  3000               	movlw	0
  2261  077E  00B1               	movwf	_heat_flag+1
  2262                           
  2263                           ;main.c: 150: clear_dis();
  2264  077F  120A  158A  243B  120A  118A  	fcall	_clear_dis
  2265                           
  2266                           ;main.c: 151: reset_flag = 0x13;
  2267  0784  3013               	movlw	19
  2268  0785  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0786  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0787                     L5:	
  2271  0787  00BA               	movwf	_reset_flag
  2272  0788  3000               	movlw	0
  2273  0789  00BB               	movwf	_reset_flag+1
  2274                           
  2275                           ;main.c: 152: }
  2276  078A  2FC0               	goto	l3020
  2277  078B                     l3008:	
  2278                           
  2279                           ;main.c: 153: else
  2280                           ;main.c: 154: {
  2281                           ;main.c: 155: flag = 0;
  2282  078B  01B2               	clrf	_flag
  2283  078C  01B3               	clrf	_flag+1
  2284                           
  2285                           ;main.c: 156: }
  2286                           ;main.c: 157: }
  2287  078D  2FC0               	goto	l3020
  2288  078E                     l3010:	
  2289                           
  2290                           ;main.c: 158: else
  2291                           ;main.c: 159: {
  2292                           ;main.c: 160: flag = 0;
  2293  078E  01B2               	clrf	_flag
  2294  078F  01B3               	clrf	_flag+1
  2295                           
  2296                           ;main.c: 161: set_time(key);
  2297  0790  085A               	movf	mode_select@key,w
  2298  0791  120A  118A  2028  120A  118A  	fcall	_set_time
  2299                           
  2300                           ;main.c: 162: }
  2301                           ;main.c: 163: break;
  2302  0796  2FC0               	goto	l3020
  2303  0797                     l211:	
  2304                           ;main.c: 164: case 0x08:
  2305                           
  2306                           
  2307                           ;main.c: 165: TMR2ON = 0;
  2308  0797  1112               	bcf	18,2	;volatile
  2309                           
  2310                           ;main.c: 166: RC2 = 0;
  2311  0798  1107               	bcf	7,2	;volatile
  2312                           
  2313                           ;main.c: 167: break;
  2314  0799  2FC0               	goto	l3020
  2315  079A                     l212:	
  2316                           ;main.c: 168: case 0x07:
  2317                           
  2318                           
  2319                           ;main.c: 169: TMR2ON = 0;
  2320  079A  1112               	bcf	18,2	;volatile
  2321                           
  2322                           ;main.c: 170: RC2 = 0;
  2323  079B  1107               	bcf	7,2	;volatile
  2324                           
  2325                           ;main.c: 171: operation_mode = 0x01;
  2326  079C  3001               	movlw	1
  2327  079D  00BC               	movwf	_operation_mode
  2328  079E  3000               	movlw	0
  2329  079F  00BD               	movwf	_operation_mode+1
  2330                           
  2331                           ;main.c: 173: }
  2332                           
  2333                           ;main.c: 172: break;
  2334  07A0  2FC0               	goto	l3020
  2335  07A1                     l3018:	
  2336                           
  2337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2338                           ; Switch size 1, requested type "space"
  2339                           ; Number of cases is 1, Range of values is 0 to 0
  2340                           ; switch strategies available:
  2341                           ; Name         Instructions Cycles
  2342                           ; simple_byte            4     3 (average)
  2343                           ; direct_byte           11     8 (fixed)
  2344                           ; jumptable            260     6 (fixed)
  2345                           ;	Chosen strategy is simple_byte
  2346  07A1  083D               	movf	_operation_mode+1,w
  2347  07A2  3A00               	xorlw	0	; case 0
  2348  07A3  1903               	skipnz
  2349  07A4  2FA6               	goto	l3168
  2350  07A5  2FC0               	goto	l3020
  2351  07A6                     l3168:	
  2352                           
  2353                           ; Switch size 1, requested type "space"
  2354                           ; Number of cases is 8, Range of values is 1 to 8
  2355                           ; switch strategies available:
  2356                           ; Name         Instructions Cycles
  2357                           ; simple_byte           25    13 (average)
  2358                           ; direct_byte           35    11 (fixed)
  2359                           ; jumptable            263     9 (fixed)
  2360                           ;	Chosen strategy is simple_byte
  2361  07A6  083C               	movf	_operation_mode,w
  2362  07A7  3A01               	xorlw	1	; case 1
  2363  07A8  1903               	skipnz
  2364  07A9  2F36               	goto	l2982
  2365  07AA  3A03               	xorlw	3	; case 2
  2366  07AB  1903               	skipnz
  2367  07AC  2F42               	goto	l2986
  2368  07AD  3A01               	xorlw	1	; case 3
  2369  07AE  1903               	skipnz
  2370  07AF  2F4B               	goto	l2988
  2371  07B0  3A07               	xorlw	7	; case 4
  2372  07B1  1903               	skipnz
  2373  07B2  2F54               	goto	l2990
  2374  07B3  3A01               	xorlw	1	; case 5
  2375  07B4  1903               	skipnz
  2376  07B5  2F3C               	goto	l2984
  2377  07B6  3A03               	xorlw	3	; case 6
  2378  07B7  1903               	skipnz
  2379  07B8  2F3C               	goto	l2984
  2380  07B9  3A01               	xorlw	1	; case 7
  2381  07BA  1903               	skipnz
  2382  07BB  2F9A               	goto	l212
  2383  07BC  3A0F               	xorlw	15	; case 8
  2384  07BD  1903               	skipnz
  2385  07BE  2F97               	goto	l211
  2386  07BF  2FC0               	goto	l3020
  2387  07C0                     l3020:	
  2388                           
  2389                           ;main.c: 174: if(flag == 0)
  2390  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  2391  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  2392  07C2  0832               	movf	_flag,w
  2393  07C3  0433               	iorwf	_flag+1,w
  2394  07C4  1D03               	btfss	3,2
  2395  07C5  0008               	return
  2396                           
  2397                           ;main.c: 175: {
  2398                           ;main.c: 176: reset_flag = 0x0F;
  2399  07C6  300F               	movlw	15
  2400  07C7  00BA               	movwf	_reset_flag
  2401  07C8  3000               	movlw	0
  2402  07C9  00BB               	movwf	_reset_flag+1
  2403  07CA  0008               	return
  2404  07CB                     __end_of_mode_select:	
  2405                           
  2406                           	psect	text5
  2407  0637                     __ptext5:	
  2408 ;; *************** function _time_dis *****************
  2409 ;; Defined at:
  2410 ;;		line 333 in file "main.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;		None
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;		None
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2424 ;;      Params:         0       0       0       0       0
  2425 ;;      Locals:         0       0       0       0       0
  2426 ;;      Temps:          0       3       0       0       0
  2427 ;;      Totals:         0       3       0       0       0
  2428 ;;Total ram usage:        3 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    4
  2431 ;; This function calls:
  2432 ;;		___awdiv
  2433 ;;		___awmod
  2434 ;;		_clcd_print
  2435 ;;		_clcd_putch
  2436 ;;		_clear_dis
  2437 ;;		_door_status_check
  2438 ;; This function is called by:
  2439 ;;		_mode_select
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           
  2444                           ;psect for function _time_dis
  2445  0637                     _time_dis:	
  2446                           
  2447                           ;main.c: 335: door_status_check();
  2448                           
  2449                           ;incstack = 0
  2450                           ; Regs used in _time_dis: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2451  0637  120A  158A  250D  120A  118A  	fcall	_door_status_check
  2452                           
  2453                           ;main.c: 336: clcd_print(" TIME =  ", (0x80 + 0));
  2454  063C  3015               	movlw	low (STR_15| (0+32768))
  2455  063D  1283               	bcf	3,5	;RP0=0, select bank0
  2456  063E  1303               	bcf	3,6	;RP1=0, select bank0
  2457  063F  00C5               	movwf	clcd_print@str
  2458  0640  3086               	movlw	high (STR_15| (0+32768))
  2459  0641  00C6               	movwf	clcd_print@str+1
  2460  0642  3080               	movlw	128
  2461  0643  00D4               	movwf	??_time_dis
  2462  0644  0854               	movf	??_time_dis,w
  2463  0645  00C7               	movwf	clcd_print@addr
  2464  0646  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2465                           
  2466                           ;main.c: 338: min_arr[0] = min / 10 + '0';
  2467  064B  300A               	movlw	10
  2468  064C  1283               	bcf	3,5	;RP0=0, select bank0
  2469  064D  1303               	bcf	3,6	;RP1=0, select bank0
  2470  064E  00C4               	movwf	___awdiv@divisor
  2471  064F  3000               	movlw	0
  2472  0650  00C5               	movwf	___awdiv@divisor+1
  2473  0651  0839               	movf	_min+1,w
  2474  0652  00C7               	movwf	___awdiv@dividend+1
  2475  0653  0838               	movf	_min,w
  2476  0654  00C6               	movwf	___awdiv@dividend
  2477  0655  120A  158A  261C  120A  118A  	fcall	___awdiv
  2478  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2479  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2480  065C  0844               	movf	?___awdiv,w
  2481  065D  3E30               	addlw	48
  2482  065E  00D4               	movwf	??_time_dis
  2483  065F  0854               	movf	??_time_dis,w
  2484  0660  00BE               	movwf	_min_arr
  2485                           
  2486                           ;main.c: 339: min_arr[1] = min % 10 + '0';
  2487  0661  300A               	movlw	10
  2488  0662  00CC               	movwf	___awmod@divisor
  2489  0663  3000               	movlw	0
  2490  0664  00CD               	movwf	___awmod@divisor+1
  2491  0665  0839               	movf	_min+1,w
  2492  0666  00CF               	movwf	___awmod@dividend+1
  2493  0667  0838               	movf	_min,w
  2494  0668  00CE               	movwf	___awmod@dividend
  2495  0669  120A  158A  257F  120A  118A  	fcall	___awmod
  2496  066E  1283               	bcf	3,5	;RP0=0, select bank0
  2497  066F  1303               	bcf	3,6	;RP1=0, select bank0
  2498  0670  084C               	movf	?___awmod,w
  2499  0671  3E30               	addlw	48
  2500  0672  00D4               	movwf	??_time_dis
  2501  0673  0854               	movf	??_time_dis,w
  2502  0674  00BF               	movwf	_min_arr+1
  2503                           
  2504                           ;main.c: 340: min_arr[2] = '\0';
  2505  0675  01C0               	clrf	_min_arr+2
  2506                           
  2507                           ;main.c: 342: clcd_print(min_arr, (0x80 + 9));
  2508  0676  303E               	movlw	(low (_min_arr| 0))& (0+255)
  2509  0677  00C5               	movwf	clcd_print@str
  2510  0678  3000               	movlw	0
  2511  0679  00C6               	movwf	clcd_print@str+1
  2512  067A  3089               	movlw	137
  2513  067B  00D4               	movwf	??_time_dis
  2514  067C  0854               	movf	??_time_dis,w
  2515  067D  00C7               	movwf	clcd_print@addr
  2516  067E  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2517                           
  2518                           ;main.c: 344: clcd_putch(':', (0x80 + 11));
  2519  0683  308B               	movlw	139
  2520  0684  1283               	bcf	3,5	;RP0=0, select bank0
  2521  0685  1303               	bcf	3,6	;RP1=0, select bank0
  2522  0686  00D4               	movwf	??_time_dis
  2523  0687  0854               	movf	??_time_dis,w
  2524  0688  00D2               	movwf	clcd_putch@addr
  2525  0689  303A               	movlw	58
  2526  068A  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  2527                           
  2528                           ;main.c: 347: sec_arr[0] = sec / 10 + '0';
  2529  068F  300A               	movlw	10
  2530  0690  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0691  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0692  00C4               	movwf	___awdiv@divisor
  2533  0693  3000               	movlw	0
  2534  0694  00C5               	movwf	___awdiv@divisor+1
  2535  0695  0837               	movf	_sec+1,w
  2536  0696  00C7               	movwf	___awdiv@dividend+1
  2537  0697  0836               	movf	_sec,w
  2538  0698  00C6               	movwf	___awdiv@dividend
  2539  0699  120A  158A  261C  120A  118A  	fcall	___awdiv
  2540  069E  1283               	bcf	3,5	;RP0=0, select bank0
  2541  069F  1303               	bcf	3,6	;RP1=0, select bank0
  2542  06A0  0844               	movf	?___awdiv,w
  2543  06A1  3E30               	addlw	48
  2544  06A2  00D4               	movwf	??_time_dis
  2545  06A3  0854               	movf	??_time_dis,w
  2546  06A4  00C1               	movwf	_sec_arr
  2547                           
  2548                           ;main.c: 348: sec_arr[1] = sec % 10 + '0';
  2549  06A5  300A               	movlw	10
  2550  06A6  00CC               	movwf	___awmod@divisor
  2551  06A7  3000               	movlw	0
  2552  06A8  00CD               	movwf	___awmod@divisor+1
  2553  06A9  0837               	movf	_sec+1,w
  2554  06AA  00CF               	movwf	___awmod@dividend+1
  2555  06AB  0836               	movf	_sec,w
  2556  06AC  00CE               	movwf	___awmod@dividend
  2557  06AD  120A  158A  257F  120A  118A  	fcall	___awmod
  2558  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  2559  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  2560  06B4  084C               	movf	?___awmod,w
  2561  06B5  3E30               	addlw	48
  2562  06B6  00D4               	movwf	??_time_dis
  2563  06B7  0854               	movf	??_time_dis,w
  2564  06B8  00C2               	movwf	_sec_arr+1
  2565                           
  2566                           ;main.c: 349: sec_arr[2] = '\0';
  2567  06B9  01C3               	clrf	_sec_arr+2
  2568                           
  2569                           ;main.c: 355: clcd_print(sec_arr, (0x80 + 12));
  2570  06BA  3041               	movlw	(low (_sec_arr| 0))& (0+255)
  2571  06BB  00C5               	movwf	clcd_print@str
  2572  06BC  3000               	movlw	0
  2573  06BD  00C6               	movwf	clcd_print@str+1
  2574  06BE  308C               	movlw	140
  2575  06BF  00D4               	movwf	??_time_dis
  2576  06C0  0854               	movf	??_time_dis,w
  2577  06C1  00C7               	movwf	clcd_print@addr
  2578  06C2  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2579                           
  2580                           ;main.c: 357: clcd_print(" 4.Start/Resume ", (0xC0 + 0));
  2581  06C7  3044               	movlw	low (STR_16| (0+32768))
  2582  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  2583  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  2584  06CA  00C5               	movwf	clcd_print@str
  2585  06CB  3085               	movlw	high (STR_16| (0+32768))
  2586  06CC  00C6               	movwf	clcd_print@str+1
  2587  06CD  30C0               	movlw	192
  2588  06CE  00D4               	movwf	??_time_dis
  2589  06CF  0854               	movf	??_time_dis,w
  2590  06D0  00C7               	movwf	clcd_print@addr
  2591  06D1  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2592                           
  2593                           ;main.c: 358: clcd_print(" 5.Pause        ", (0x90 + 0));
  2594  06D6  3011               	movlw	low (STR_17| (0+32768))
  2595  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  2596  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  2597  06D9  00C5               	movwf	clcd_print@str
  2598  06DA  3085               	movlw	high (STR_17| (0+32768))
  2599  06DB  00C6               	movwf	clcd_print@str+1
  2600  06DC  3090               	movlw	144
  2601  06DD  00D4               	movwf	??_time_dis
  2602  06DE  0854               	movf	??_time_dis,w
  2603  06DF  00C7               	movwf	clcd_print@addr
  2604  06E0  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2605                           
  2606                           ;main.c: 359: clcd_print(" 6.Stop         ", (0xD0 + 0));
  2607  06E5  3000               	movlw	low (STR_18| (0+32768))
  2608  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  2609  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  2610  06E8  00C5               	movwf	clcd_print@str
  2611  06E9  3085               	movlw	high (STR_18| (0+32768))
  2612  06EA  00C6               	movwf	clcd_print@str+1
  2613  06EB  30D0               	movlw	208
  2614  06EC  00D4               	movwf	??_time_dis
  2615  06ED  0854               	movf	??_time_dis,w
  2616  06EE  00C7               	movwf	clcd_print@addr
  2617  06EF  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2618                           
  2619                           ;main.c: 361: if((min == 0) && (sec == 0))
  2620  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  2621  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  2622  06F6  0838               	movf	_min,w
  2623  06F7  0439               	iorwf	_min+1,w
  2624  06F8  1D03               	btfss	3,2
  2625  06F9  0008               	return
  2626  06FA  0836               	movf	_sec,w
  2627  06FB  0437               	iorwf	_sec+1,w
  2628  06FC  1D03               	btfss	3,2
  2629  06FD  0008               	return
  2630                           
  2631                           ;main.c: 362: {
  2632                           ;main.c: 363: TMR2ON = 0;
  2633  06FE  1112               	bcf	18,2	;volatile
  2634                           
  2635                           ;main.c: 364: RC2 = 0;
  2636  06FF  1107               	bcf	7,2	;volatile
  2637                           
  2638                           ;main.c: 365: clear_dis();
  2639  0700  120A  158A  243B  120A  118A  	fcall	_clear_dis
  2640                           
  2641                           ;main.c: 366: clcd_print("Cooking Time UP", (0xC0 + 0));
  2642  0705  30AA               	movlw	low (STR_19| (0+32768))
  2643  0706  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0707  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0708  00C5               	movwf	clcd_print@str
  2646  0709  3085               	movlw	high (STR_19| (0+32768))
  2647  070A  00C6               	movwf	clcd_print@str+1
  2648  070B  30C0               	movlw	192
  2649  070C  00D4               	movwf	??_time_dis
  2650  070D  0854               	movf	??_time_dis,w
  2651  070E  00C7               	movwf	clcd_print@addr
  2652  070F  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2653                           
  2654                           ;main.c: 368: RC1 = 1;
  2655  0714  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0715  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0716  1487               	bsf	7,1	;volatile
  2658                           
  2659                           ;main.c: 369: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2660  0717  3033               	movlw	51
  2661  0718  1283               	bcf	3,5	;RP0=0, select bank0
  2662  0719  1303               	bcf	3,6	;RP1=0, select bank0
  2663  071A  00D6               	movwf	??_time_dis+2
  2664  071B  30BB               	movlw	187
  2665  071C  00D5               	movwf	??_time_dis+1
  2666  071D  30DF               	movlw	223
  2667  071E  00D4               	movwf	??_time_dis
  2668  071F                     u3167:	
  2669  071F  0BD4               	decfsz	??_time_dis,f
  2670  0720  2F1F               	goto	u3167
  2671  0721  0BD5               	decfsz	??_time_dis+1,f
  2672  0722  2F1F               	goto	u3167
  2673  0723  0BD6               	decfsz	??_time_dis+2,f
  2674  0724  2F1F               	goto	u3167
  2675                           
  2676                           ;main.c: 371: RC1 = 0;
  2677  0725  1283               	bcf	3,5	;RP0=0, select bank0
  2678  0726  1303               	bcf	3,6	;RP1=0, select bank0
  2679  0727  1087               	bcf	7,1	;volatile
  2680                           
  2681                           ;main.c: 373: clear_dis();
  2682  0728  120A  158A  243B   	fcall	_clear_dis
  2683                           
  2684                           ;main.c: 374: operation_mode = 0x01;
  2685  072B  3001               	movlw	1
  2686  072C  1283               	bcf	3,5	;RP0=0, select bank0
  2687  072D  1303               	bcf	3,6	;RP1=0, select bank0
  2688  072E  00BC               	movwf	_operation_mode
  2689  072F  3000               	movlw	0
  2690  0730  00BD               	movwf	_operation_mode+1
  2691  0731  0008               	return
  2692  0732                     __end_of_time_dis:	
  2693                           
  2694                           	psect	text6
  2695  0D0D                     __ptext6:	
  2696 ;; *************** function _door_status_check *****************
  2697 ;; Defined at:
  2698 ;;		line 311 in file "main.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;		None
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;		None
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2712 ;;      Params:         0       0       0       0       0
  2713 ;;      Locals:         0       0       0       0       0
  2714 ;;      Temps:          0       1       0       0       0
  2715 ;;      Totals:         0       1       0       0       0
  2716 ;;Total ram usage:        1 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    3
  2719 ;; This function calls:
  2720 ;;		_clcd_print
  2721 ;;		_clear_dis
  2722 ;; This function is called by:
  2723 ;;		_time_dis
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           
  2728                           ;psect for function _door_status_check
  2729  0D0D                     _door_status_check:	
  2730                           
  2731                           ;main.c: 312: if(RB3 == 0)
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in _door_status_check: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2735  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  2737  0D0F  1986               	btfsc	6,3	;volatile
  2738  0D10  2D3E               	goto	l2492
  2739                           
  2740                           ;main.c: 313: {
  2741                           ;main.c: 314: RC1 = 1;
  2742  0D11  1487               	bsf	7,1	;volatile
  2743                           
  2744                           ;main.c: 315: RC2 = 0;
  2745  0D12  1107               	bcf	7,2	;volatile
  2746                           
  2747                           ;main.c: 316: TMR2ON = 0;
  2748  0D13  1112               	bcf	18,2	;volatile
  2749                           
  2750                           ;main.c: 317: clear_dis();
  2751  0D14  120A  158A  243B  120A  158A  	fcall	_clear_dis
  2752                           
  2753                           ;main.c: 318: clcd_print("Door Status:OPEN", (0xC0 + 0));
  2754  0D19  3088               	movlw	low (STR_13| (0+32768))
  2755  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  2756  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  2757  0D1C  00C5               	movwf	clcd_print@str
  2758  0D1D  3085               	movlw	high (STR_13| (0+32768))
  2759  0D1E  00C6               	movwf	clcd_print@str+1
  2760  0D1F  30C0               	movlw	192
  2761  0D20  00C8               	movwf	??_door_status_check
  2762  0D21  0848               	movf	??_door_status_check,w
  2763  0D22  00C7               	movwf	clcd_print@addr
  2764  0D23  120A  118A  27CB  120A  158A  	fcall	_clcd_print
  2765                           
  2766                           ;main.c: 319: clcd_print("Please Close", (0x90 + 0));
  2767  0D28  30D7               	movlw	low (STR_14| (0+32768))
  2768  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  2770  0D2B  00C5               	movwf	clcd_print@str
  2771  0D2C  3085               	movlw	high (STR_14| (0+32768))
  2772  0D2D  00C6               	movwf	clcd_print@str+1
  2773  0D2E  3090               	movlw	144
  2774  0D2F  00C8               	movwf	??_door_status_check
  2775  0D30  0848               	movf	??_door_status_check,w
  2776  0D31  00C7               	movwf	clcd_print@addr
  2777  0D32  120A  118A  27CB  120A  158A  	fcall	_clcd_print
  2778  0D37                     l263:	
  2779                           ;main.c: 321: {
  2780                           ;main.c: 322: ;
  2781                           
  2782                           ;main.c: 320: while(RB3 == 0)
  2783                           
  2784  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  2785  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  2786  0D39  1D86               	btfss	6,3	;volatile
  2787  0D3A  2D37               	goto	l263
  2788                           
  2789                           ;main.c: 323: }
  2790                           ;main.c: 324: clear_dis();
  2791  0D3B  120A  158A  243B   	fcall	_clear_dis
  2792  0D3E                     l2492:	
  2793                           
  2794                           ;main.c: 326: }
  2795                           ;main.c: 327: TMR2ON = 1;
  2796  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  2798  0D40  1512               	bsf	18,2	;volatile
  2799                           
  2800                           ;main.c: 328: RC1 = 0;
  2801  0D41  1087               	bcf	7,1	;volatile
  2802                           
  2803                           ;main.c: 329: RC2 = 1;
  2804  0D42  1507               	bsf	7,2	;volatile
  2805  0D43  0008               	return
  2806  0D44                     __end_of_door_status_check:	
  2807                           
  2808                           	psect	text7
  2809  0028                     __ptext7:	
  2810 ;; *************** function _set_time *****************
  2811 ;; Defined at:
  2812 ;;		line 211 in file "main.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  key             1    wreg     unsigned char 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  key             1   16[BANK0 ] unsigned char 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2826 ;;      Params:         0       0       0       0       0
  2827 ;;      Locals:         0       1       0       0       0
  2828 ;;      Temps:          0       2       0       0       0
  2829 ;;      Totals:         0       3       0       0       0
  2830 ;;Total ram usage:        3 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    3
  2833 ;; This function calls:
  2834 ;;		___awdiv
  2835 ;;		___awmod
  2836 ;;		___wmul
  2837 ;;		_clcd_print
  2838 ;;		_clear_dis
  2839 ;; This function is called by:
  2840 ;;		_mode_select
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _set_time
  2846  0028                     _set_time:	
  2847                           
  2848                           ;incstack = 0
  2849                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2850                           ;set_time@key stored from wreg
  2851  0028  1283               	bcf	3,5	;RP0=0, select bank0
  2852  0029  1303               	bcf	3,6	;RP1=0, select bank0
  2853  002A  00D4               	movwf	set_time@key
  2854                           
  2855                           ;main.c: 212: static int wait, blink, blink_pos, key_count;
  2856                           ;main.c: 213: if(reset_flag >= 0x11)
  2857  002B  083B               	movf	_reset_flag+1,w
  2858  002C  3A80               	xorlw	128
  2859  002D  00FF               	movwf	127
  2860  002E  3080               	movlw	128
  2861  002F  027F               	subwf	127,w
  2862  0030  1D03               	skipz
  2863  0031  2834               	goto	u2575
  2864  0032  3011               	movlw	17
  2865  0033  023A               	subwf	_reset_flag,w
  2866  0034                     u2575:	
  2867  0034  1C03               	skipc
  2868  0035  2871               	goto	l2718
  2869                           
  2870                           ;main.c: 214: {
  2871                           ;main.c: 216: key = 0xFF;
  2872  0036  30FF               	movlw	255
  2873  0037  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0038  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0039  00D2               	movwf	??_set_time
  2876  003A  0852               	movf	??_set_time,w
  2877  003B  00D4               	movwf	set_time@key
  2878                           
  2879                           ;main.c: 217: sec = 0;
  2880  003C  01B6               	clrf	_sec
  2881  003D  01B7               	clrf	_sec+1
  2882                           
  2883                           ;main.c: 218: min = 0;
  2884  003E  01B8               	clrf	_min
  2885  003F  01B9               	clrf	_min+1
  2886                           
  2887                           ;main.c: 219: key_count = 0;
  2888  0040  01A8               	clrf	set_time@key_count
  2889  0041  01A9               	clrf	set_time@key_count+1
  2890                           
  2891                           ;main.c: 220: blink = 0;
  2892  0042  01AC               	clrf	set_time@blink
  2893  0043  01AD               	clrf	set_time@blink+1
  2894                           
  2895                           ;main.c: 221: blink_pos = 0;
  2896  0044  01AA               	clrf	set_time@blink_pos
  2897  0045  01AB               	clrf	set_time@blink_pos+1
  2898                           
  2899                           ;main.c: 224: clcd_print("SET TIME (MM:SS)", (0x80 + 0));
  2900  0046  3077               	movlw	low (STR_8| (0+32768))
  2901  0047  00C5               	movwf	clcd_print@str
  2902  0048  3085               	movlw	high (STR_8| (0+32768))
  2903  0049  00C6               	movwf	clcd_print@str+1
  2904  004A  3080               	movlw	128
  2905  004B  00D2               	movwf	??_set_time
  2906  004C  0852               	movf	??_set_time,w
  2907  004D  00C7               	movwf	clcd_print@addr
  2908  004E  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2909                           
  2910                           ;main.c: 225: clcd_print("TIME- 00:00", (0xC0 + 0));
  2911  0053  3009               	movlw	low (STR_9| (0+32768))
  2912  0054  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0055  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0056  00C5               	movwf	clcd_print@str
  2915  0057  3086               	movlw	high (STR_9| (0+32768))
  2916  0058  00C6               	movwf	clcd_print@str+1
  2917  0059  30C0               	movlw	192
  2918  005A  00D2               	movwf	??_set_time
  2919  005B  0852               	movf	??_set_time,w
  2920  005C  00C7               	movwf	clcd_print@addr
  2921  005D  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2922                           
  2923                           ;main.c: 226: clcd_print("*:CLEAR  #:ENTER", (0xD0 + 0));
  2924  0062  3099               	movlw	low (STR_10| (0+32768))
  2925  0063  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0064  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0065  00C5               	movwf	clcd_print@str
  2928  0066  3085               	movlw	high (STR_10| (0+32768))
  2929  0067  00C6               	movwf	clcd_print@str+1
  2930  0068  30D0               	movlw	208
  2931  0069  00D2               	movwf	??_set_time
  2932  006A  0852               	movf	??_set_time,w
  2933  006B  00C7               	movwf	clcd_print@addr
  2934  006C  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  2935  0071                     l2718:	
  2936                           
  2937                           ;main.c: 227: }
  2938                           ;main.c: 233: if(key != 0xFF && key != '*' && key != '#')
  2939  0071  1283               	bcf	3,5	;RP0=0, select bank0
  2940  0072  1303               	bcf	3,6	;RP1=0, select bank0
  2941  0073  0A54               	incf	set_time@key,w
  2942  0074  1903               	btfsc	3,2
  2943  0075  2915               	goto	l2750
  2944  0076  302A               	movlw	42
  2945  0077  0654               	xorwf	set_time@key,w
  2946  0078  1903               	btfsc	3,2
  2947  0079  2915               	goto	l2750
  2948  007A  3023               	movlw	35
  2949  007B  0654               	xorwf	set_time@key,w
  2950  007C  1903               	btfsc	3,2
  2951  007D  2915               	goto	l2750
  2952                           
  2953                           ;main.c: 234: {
  2954                           ;main.c: 236: key_count++;
  2955  007E  3001               	movlw	1
  2956  007F  07A8               	addwf	set_time@key_count,f
  2957  0080  1803               	skipnc
  2958  0081  0AA9               	incf	set_time@key_count+1,f
  2959  0082  3000               	movlw	0
  2960  0083  07A9               	addwf	set_time@key_count+1,f
  2961                           
  2962                           ;main.c: 237: if(key_count <= 2)
  2963  0084  0829               	movf	set_time@key_count+1,w
  2964  0085  3A80               	xorlw	128
  2965  0086  00FF               	movwf	127
  2966  0087  3080               	movlw	128
  2967  0088  027F               	subwf	127,w
  2968  0089  1D03               	skipz
  2969  008A  288D               	goto	u2615
  2970  008B  3003               	movlw	3
  2971  008C  0228               	subwf	set_time@key_count,w
  2972  008D                     u2615:	
  2973  008D  1803               	skipnc
  2974  008E  28AB               	goto	l2732
  2975                           
  2976                           ;main.c: 238: {
  2977                           ;main.c: 239: sec = sec * 10 + key;
  2978  008F  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0090  1303               	bcf	3,6	;RP1=0, select bank0
  2980  0091  0837               	movf	_sec+1,w
  2981  0092  00C5               	movwf	___wmul@multiplier+1
  2982  0093  0836               	movf	_sec,w
  2983  0094  00C4               	movwf	___wmul@multiplier
  2984  0095  300A               	movlw	10
  2985  0096  00C6               	movwf	___wmul@multiplicand
  2986  0097  3000               	movlw	0
  2987  0098  00C7               	movwf	___wmul@multiplicand+1
  2988  0099  120A  158A  24B3  120A  118A  	fcall	___wmul
  2989  009E  1283               	bcf	3,5	;RP0=0, select bank0
  2990  009F  1303               	bcf	3,6	;RP1=0, select bank0
  2991  00A0  0854               	movf	set_time@key,w
  2992  00A1  0744               	addwf	?___wmul,w
  2993  00A2  00B6               	movwf	_sec
  2994  00A3  3000               	movlw	0
  2995  00A4  1803               	skipnc
  2996  00A5  3001               	movlw	1
  2997  00A6  0745               	addwf	?___wmul+1,w
  2998  00A7  00B7               	movwf	_sec+1
  2999                           
  3000                           ;main.c: 240: blink_pos = 0;
  3001  00A8  01AA               	clrf	set_time@blink_pos
  3002  00A9  01AB               	clrf	set_time@blink_pos+1
  3003                           
  3004                           ;main.c: 241: }
  3005  00AA  28E2               	goto	l2740
  3006  00AB                     l2732:	
  3007                           
  3008                           ;main.c: 242: else if(key_count > 2 && key_count < 5)
  3009  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  3010  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  3011  00AD  0829               	movf	set_time@key_count+1,w
  3012  00AE  3A80               	xorlw	128
  3013  00AF  00FF               	movwf	127
  3014  00B0  3080               	movlw	128
  3015  00B1  027F               	subwf	127,w
  3016  00B2  1D03               	skipz
  3017  00B3  28B6               	goto	u2625
  3018  00B4  3003               	movlw	3
  3019  00B5  0228               	subwf	set_time@key_count,w
  3020  00B6                     u2625:	
  3021  00B6  1C03               	skipc
  3022  00B7  28E2               	goto	l2740
  3023  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  3024  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  3025  00BA  0829               	movf	set_time@key_count+1,w
  3026  00BB  3A80               	xorlw	128
  3027  00BC  00FF               	movwf	127
  3028  00BD  3080               	movlw	128
  3029  00BE  027F               	subwf	127,w
  3030  00BF  1D03               	skipz
  3031  00C0  28C3               	goto	u2635
  3032  00C1  3005               	movlw	5
  3033  00C2  0228               	subwf	set_time@key_count,w
  3034  00C3                     u2635:	
  3035  00C3  1803               	skipnc
  3036  00C4  28E2               	goto	l2740
  3037                           
  3038                           ;main.c: 243: {
  3039                           ;main.c: 244: min = min *10 + key;
  3040  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  3041  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  3042  00C7  0839               	movf	_min+1,w
  3043  00C8  00C5               	movwf	___wmul@multiplier+1
  3044  00C9  0838               	movf	_min,w
  3045  00CA  00C4               	movwf	___wmul@multiplier
  3046  00CB  300A               	movlw	10
  3047  00CC  00C6               	movwf	___wmul@multiplicand
  3048  00CD  3000               	movlw	0
  3049  00CE  00C7               	movwf	___wmul@multiplicand+1
  3050  00CF  120A  158A  24B3  120A  118A  	fcall	___wmul
  3051  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  3052  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  3053  00D6  0854               	movf	set_time@key,w
  3054  00D7  0744               	addwf	?___wmul,w
  3055  00D8  00B8               	movwf	_min
  3056  00D9  3000               	movlw	0
  3057  00DA  1803               	skipnc
  3058  00DB  3001               	movlw	1
  3059  00DC  0745               	addwf	?___wmul+1,w
  3060  00DD  00B9               	movwf	_min+1
  3061                           
  3062                           ;main.c: 245: blink_pos = 1;
  3063  00DE  3001               	movlw	1
  3064  00DF  00AA               	movwf	set_time@blink_pos
  3065  00E0  3000               	movlw	0
  3066  00E1  00AB               	movwf	set_time@blink_pos+1
  3067  00E2                     l2740:	
  3068                           
  3069                           ;main.c: 246: }
  3070                           ;main.c: 247: if(key_count < 2) {
  3071  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  3072  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  3073  00E4  0829               	movf	set_time@key_count+1,w
  3074  00E5  3A80               	xorlw	128
  3075  00E6  00FF               	movwf	127
  3076  00E7  3080               	movlw	128
  3077  00E8  027F               	subwf	127,w
  3078  00E9  1D03               	skipz
  3079  00EA  28ED               	goto	u2645
  3080  00EB  3002               	movlw	2
  3081  00EC  0228               	subwf	set_time@key_count,w
  3082  00ED                     u2645:	
  3083  00ED  1803               	skipnc
  3084  00EE  28F4               	goto	l2744
  3085                           
  3086                           ;main.c: 248: blink_pos = 0;
  3087  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  3088  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  3089  00F1  01AA               	clrf	set_time@blink_pos
  3090  00F2  01AB               	clrf	set_time@blink_pos+1
  3091                           
  3092                           ;main.c: 249: }
  3093  00F3  295F               	goto	l2774
  3094  00F4                     l2744:	
  3095                           
  3096                           ;main.c: 250: else if(key_count >= 2 && key_count < 5) {
  3097  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  3098  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  3099  00F6  0829               	movf	set_time@key_count+1,w
  3100  00F7  3A80               	xorlw	128
  3101  00F8  00FF               	movwf	127
  3102  00F9  3080               	movlw	128
  3103  00FA  027F               	subwf	127,w
  3104  00FB  1D03               	skipz
  3105  00FC  28FF               	goto	u2655
  3106  00FD  3002               	movlw	2
  3107  00FE  0228               	subwf	set_time@key_count,w
  3108  00FF                     u2655:	
  3109  00FF  1C03               	skipc
  3110  0100  295F               	goto	l2774
  3111  0101  1283               	bcf	3,5	;RP0=0, select bank0
  3112  0102  1303               	bcf	3,6	;RP1=0, select bank0
  3113  0103  0829               	movf	set_time@key_count+1,w
  3114  0104  3A80               	xorlw	128
  3115  0105  00FF               	movwf	127
  3116  0106  3080               	movlw	128
  3117  0107  027F               	subwf	127,w
  3118  0108  1D03               	skipz
  3119  0109  290C               	goto	u2665
  3120  010A  3005               	movlw	5
  3121  010B  0228               	subwf	set_time@key_count,w
  3122  010C                     u2665:	
  3123  010C  1803               	skipnc
  3124  010D  295F               	goto	l2774
  3125                           
  3126                           ;main.c: 251: blink_pos = 1;
  3127  010E  3001               	movlw	1
  3128  010F  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0110  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0111  00AA               	movwf	set_time@blink_pos
  3131  0112  3000               	movlw	0
  3132  0113  00AB               	movwf	set_time@blink_pos+1
  3133                           
  3134                           ;main.c: 252: }
  3135                           ;main.c: 253: }
  3136  0114  295F               	goto	l2774
  3137  0115                     l2750:	
  3138                           
  3139                           ;main.c: 255: else if(key == '*')
  3140  0115  302A               	movlw	42
  3141  0116  0654               	xorwf	set_time@key,w
  3142  0117  1D03               	btfss	3,2
  3143  0118  294E               	goto	l2764
  3144                           
  3145                           ;main.c: 256: {
  3146                           ;main.c: 257: if(key_count <= 2)
  3147  0119  0829               	movf	set_time@key_count+1,w
  3148  011A  3A80               	xorlw	128
  3149  011B  00FF               	movwf	127
  3150  011C  3080               	movlw	128
  3151  011D  027F               	subwf	127,w
  3152  011E  1D03               	skipz
  3153  011F  2922               	goto	u2685
  3154  0120  3003               	movlw	3
  3155  0121  0228               	subwf	set_time@key_count,w
  3156  0122                     u2685:	
  3157  0122  1803               	skipnc
  3158  0123  292B               	goto	l2756
  3159                           
  3160                           ;main.c: 258: {
  3161                           ;main.c: 259: sec = 0;
  3162  0124  1283               	bcf	3,5	;RP0=0, select bank0
  3163  0125  1303               	bcf	3,6	;RP1=0, select bank0
  3164  0126  01B6               	clrf	_sec
  3165  0127  01B7               	clrf	_sec+1
  3166                           
  3167                           ;main.c: 260: key_count = 0;
  3168  0128  01A8               	clrf	set_time@key_count
  3169  0129  01A9               	clrf	set_time@key_count+1
  3170                           
  3171                           ;main.c: 261: }
  3172  012A  295F               	goto	l2774
  3173  012B                     l2756:	
  3174                           
  3175                           ;main.c: 262: else if(key_count > 2 && key_count < 5)
  3176  012B  1283               	bcf	3,5	;RP0=0, select bank0
  3177  012C  1303               	bcf	3,6	;RP1=0, select bank0
  3178  012D  0829               	movf	set_time@key_count+1,w
  3179  012E  3A80               	xorlw	128
  3180  012F  00FF               	movwf	127
  3181  0130  3080               	movlw	128
  3182  0131  027F               	subwf	127,w
  3183  0132  1D03               	skipz
  3184  0133  2936               	goto	u2695
  3185  0134  3003               	movlw	3
  3186  0135  0228               	subwf	set_time@key_count,w
  3187  0136                     u2695:	
  3188  0136  1C03               	skipc
  3189  0137  295F               	goto	l2774
  3190  0138  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0139  1303               	bcf	3,6	;RP1=0, select bank0
  3192  013A  0829               	movf	set_time@key_count+1,w
  3193  013B  3A80               	xorlw	128
  3194  013C  00FF               	movwf	127
  3195  013D  3080               	movlw	128
  3196  013E  027F               	subwf	127,w
  3197  013F  1D03               	skipz
  3198  0140  2943               	goto	u2705
  3199  0141  3005               	movlw	5
  3200  0142  0228               	subwf	set_time@key_count,w
  3201  0143                     u2705:	
  3202  0143  1803               	skipnc
  3203  0144  295F               	goto	l2774
  3204                           
  3205                           ;main.c: 263: {
  3206                           ;main.c: 264: min = 0;
  3207  0145  1283               	bcf	3,5	;RP0=0, select bank0
  3208  0146  1303               	bcf	3,6	;RP1=0, select bank0
  3209  0147  01B8               	clrf	_min
  3210  0148  01B9               	clrf	_min+1
  3211                           
  3212                           ;main.c: 265: key_count = 2;
  3213  0149  3002               	movlw	2
  3214  014A  00A8               	movwf	set_time@key_count
  3215  014B  3000               	movlw	0
  3216  014C  00A9               	movwf	set_time@key_count+1
  3217                           
  3218                           ;main.c: 266: }
  3219                           ;main.c: 267: }
  3220  014D  295F               	goto	l2774
  3221  014E                     l2764:	
  3222                           
  3223                           ;main.c: 268: else if(key == '#')
  3224  014E  3023               	movlw	35
  3225  014F  0654               	xorwf	set_time@key,w
  3226  0150  1D03               	btfss	3,2
  3227  0151  295F               	goto	l2774
  3228                           
  3229                           ;main.c: 269: {
  3230                           ;main.c: 270: clear_dis();
  3231  0152  120A  158A  243B  120A  118A  	fcall	_clear_dis
  3232                           
  3233                           ;main.c: 271: TMR2ON = 1;
  3234  0157  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0158  1303               	bcf	3,6	;RP1=0, select bank0
  3236  0159  1512               	bsf	18,2	;volatile
  3237                           
  3238                           ;main.c: 272: RC2 = 1;
  3239  015A  1507               	bsf	7,2	;volatile
  3240                           
  3241                           ;main.c: 273: operation_mode = 0x06;
  3242  015B  3006               	movlw	6
  3243  015C  00BC               	movwf	_operation_mode
  3244  015D  3000               	movlw	0
  3245  015E  00BD               	movwf	_operation_mode+1
  3246  015F                     l2774:	
  3247                           
  3248                           ;main.c: 274: }
  3249                           ;main.c: 277: sec_arr[0] = sec / 10 + '0';
  3250  015F  300A               	movlw	10
  3251  0160  1283               	bcf	3,5	;RP0=0, select bank0
  3252  0161  1303               	bcf	3,6	;RP1=0, select bank0
  3253  0162  00C4               	movwf	___awdiv@divisor
  3254  0163  3000               	movlw	0
  3255  0164  00C5               	movwf	___awdiv@divisor+1
  3256  0165  0837               	movf	_sec+1,w
  3257  0166  00C7               	movwf	___awdiv@dividend+1
  3258  0167  0836               	movf	_sec,w
  3259  0168  00C6               	movwf	___awdiv@dividend
  3260  0169  120A  158A  261C  120A  118A  	fcall	___awdiv
  3261  016E  1283               	bcf	3,5	;RP0=0, select bank0
  3262  016F  1303               	bcf	3,6	;RP1=0, select bank0
  3263  0170  0844               	movf	?___awdiv,w
  3264  0171  3E30               	addlw	48
  3265  0172  00D2               	movwf	??_set_time
  3266  0173  0852               	movf	??_set_time,w
  3267  0174  00C1               	movwf	_sec_arr
  3268                           
  3269                           ;main.c: 278: sec_arr[1] = sec % 10 + '0';
  3270  0175  300A               	movlw	10
  3271  0176  00CC               	movwf	___awmod@divisor
  3272  0177  3000               	movlw	0
  3273  0178  00CD               	movwf	___awmod@divisor+1
  3274  0179  0837               	movf	_sec+1,w
  3275  017A  00CF               	movwf	___awmod@dividend+1
  3276  017B  0836               	movf	_sec,w
  3277  017C  00CE               	movwf	___awmod@dividend
  3278  017D  120A  158A  257F  120A  118A  	fcall	___awmod
  3279  0182  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0183  1303               	bcf	3,6	;RP1=0, select bank0
  3281  0184  084C               	movf	?___awmod,w
  3282  0185  3E30               	addlw	48
  3283  0186  00D2               	movwf	??_set_time
  3284  0187  0852               	movf	??_set_time,w
  3285  0188  00C2               	movwf	_sec_arr+1
  3286                           
  3287                           ;main.c: 279: sec_arr[2] = '\0';
  3288  0189  01C3               	clrf	_sec_arr+2
  3289                           
  3290                           ;main.c: 281: min_arr[0] = min / 10 + '0';
  3291  018A  300A               	movlw	10
  3292  018B  00C4               	movwf	___awdiv@divisor
  3293  018C  3000               	movlw	0
  3294  018D  00C5               	movwf	___awdiv@divisor+1
  3295  018E  0839               	movf	_min+1,w
  3296  018F  00C7               	movwf	___awdiv@dividend+1
  3297  0190  0838               	movf	_min,w
  3298  0191  00C6               	movwf	___awdiv@dividend
  3299  0192  120A  158A  261C  120A  118A  	fcall	___awdiv
  3300  0197  1283               	bcf	3,5	;RP0=0, select bank0
  3301  0198  1303               	bcf	3,6	;RP1=0, select bank0
  3302  0199  0844               	movf	?___awdiv,w
  3303  019A  3E30               	addlw	48
  3304  019B  00D2               	movwf	??_set_time
  3305  019C  0852               	movf	??_set_time,w
  3306  019D  00BE               	movwf	_min_arr
  3307                           
  3308                           ;main.c: 282: min_arr[1] = min % 10 + '0';
  3309  019E  300A               	movlw	10
  3310  019F  00CC               	movwf	___awmod@divisor
  3311  01A0  3000               	movlw	0
  3312  01A1  00CD               	movwf	___awmod@divisor+1
  3313  01A2  0839               	movf	_min+1,w
  3314  01A3  00CF               	movwf	___awmod@dividend+1
  3315  01A4  0838               	movf	_min,w
  3316  01A5  00CE               	movwf	___awmod@dividend
  3317  01A6  120A  158A  257F  120A  118A  	fcall	___awmod
  3318  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3319  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3320  01AD  084C               	movf	?___awmod,w
  3321  01AE  3E30               	addlw	48
  3322  01AF  00D2               	movwf	??_set_time
  3323  01B0  0852               	movf	??_set_time,w
  3324  01B1  00BF               	movwf	_min_arr+1
  3325                           
  3326                           ;main.c: 283: min_arr[2] = '\0';
  3327  01B2  01C0               	clrf	_min_arr+2
  3328                           
  3329                           ;main.c: 287: if(wait++ == 25)
  3330  01B3  3001               	movlw	1
  3331  01B4  07AE               	addwf	set_time@wait,f
  3332  01B5  1803               	skipnc
  3333  01B6  0AAF               	incf	set_time@wait+1,f
  3334  01B7  3000               	movlw	0
  3335  01B8  07AF               	addwf	set_time@wait+1,f
  3336  01B9  301A               	movlw	26
  3337  01BA  062E               	xorwf	set_time@wait,w
  3338  01BB  042F               	iorwf	set_time@wait+1,w
  3339  01BC  1D03               	btfss	3,2
  3340  01BD  29E9               	goto	l2796
  3341                           
  3342                           ;main.c: 288: {
  3343                           ;main.c: 289: wait = 0;
  3344  01BE  01AE               	clrf	set_time@wait
  3345  01BF  01AF               	clrf	set_time@wait+1
  3346                           
  3347                           ;main.c: 290: blink = !blink;
  3348  01C0  082C               	movf	set_time@blink,w
  3349  01C1  042D               	iorwf	set_time@blink+1,w
  3350  01C2  1D03               	btfss	3,2
  3351  01C3  29C6               	goto	u2730
  3352  01C4  3001               	movlw	1
  3353  01C5  29C7               	goto	u2740
  3354  01C6                     u2730:	
  3355  01C6  3000               	movlw	0
  3356  01C7                     u2740:	
  3357  01C7  00D2               	movwf	??_set_time
  3358  01C8  01D3               	clrf	??_set_time+1
  3359  01C9  0852               	movf	??_set_time,w
  3360  01CA  00AC               	movwf	set_time@blink
  3361  01CB  0853               	movf	??_set_time+1,w
  3362  01CC  00AD               	movwf	set_time@blink+1
  3363                           
  3364                           ;main.c: 291: clcd_print(min_arr, (0xC0 + 6));
  3365  01CD  303E               	movlw	(low (_min_arr| 0))& (0+255)
  3366  01CE  00C5               	movwf	clcd_print@str
  3367  01CF  3000               	movlw	0
  3368  01D0  00C6               	movwf	clcd_print@str+1
  3369  01D1  30C6               	movlw	198
  3370  01D2  00D2               	movwf	??_set_time
  3371  01D3  0852               	movf	??_set_time,w
  3372  01D4  00C7               	movwf	clcd_print@addr
  3373  01D5  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3374                           
  3375                           ;main.c: 292: clcd_print(sec_arr, (0xC0 + 9));
  3376  01DA  3041               	movlw	(low (_sec_arr| 0))& (0+255)
  3377  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  3378  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  3379  01DD  00C5               	movwf	clcd_print@str
  3380  01DE  3000               	movlw	0
  3381  01DF  00C6               	movwf	clcd_print@str+1
  3382  01E0  30C9               	movlw	201
  3383  01E1  00D2               	movwf	??_set_time
  3384  01E2  0852               	movf	??_set_time,w
  3385  01E3  00C7               	movwf	clcd_print@addr
  3386  01E4  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3387  01E9                     l2796:	
  3388                           
  3389                           ;main.c: 294: }
  3390                           ;main.c: 296: if(blink)
  3391  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  3392  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  3393  01EB  082C               	movf	set_time@blink,w
  3394  01EC  042D               	iorwf	set_time@blink+1,w
  3395  01ED  1903               	btfsc	3,2
  3396  01EE  0008               	return
  3397  01EF  2A0A               	goto	l2806
  3398  01F0                     l2800:	
  3399                           ;main.c: 299: {
  3400                           ;main.c: 300: case 0:
  3401                           
  3402                           ;main.c: 297: {
  3403                           ;main.c: 298: switch(blink_pos)
  3404                           
  3405                           
  3406                           ;main.c: 301: clcd_print("  ", (0xC0 + 9));
  3407  01F0  300E               	movlw	low ((STR_18+14)| (0+32768))
  3408  01F1  00C5               	movwf	clcd_print@str
  3409  01F2  3085               	movlw	high ((STR_18+14)| (0+32768))
  3410  01F3  00C6               	movwf	clcd_print@str+1
  3411  01F4  30C9               	movlw	201
  3412  01F5  00D2               	movwf	??_set_time
  3413  01F6  0852               	movf	??_set_time,w
  3414  01F7  00C7               	movwf	clcd_print@addr
  3415  01F8  120A  118A  27CB   	fcall	_clcd_print
  3416                           
  3417                           ;main.c: 302: break;
  3418  01FB  0008               	return
  3419  01FC                     l2802:	
  3420                           ;main.c: 303: case 1:
  3421                           
  3422                           
  3423                           ;main.c: 304: clcd_print("  ", (0xC0 + 6));
  3424  01FC  300E               	movlw	low ((STR_18+14)| (0+32768))
  3425  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  3426  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  3427  01FF  00C5               	movwf	clcd_print@str
  3428  0200  3085               	movlw	high ((STR_18+14)| (0+32768))
  3429  0201  00C6               	movwf	clcd_print@str+1
  3430  0202  30C6               	movlw	198
  3431  0203  00D2               	movwf	??_set_time
  3432  0204  0852               	movf	??_set_time,w
  3433  0205  00C7               	movwf	clcd_print@addr
  3434  0206  120A  118A  27CB   	fcall	_clcd_print
  3435                           
  3436                           ;main.c: 306: }
  3437                           
  3438                           ;main.c: 305: break;
  3439  0209  0008               	return
  3440  020A                     l2806:	
  3441                           
  3442                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3443                           ; Switch size 1, requested type "space"
  3444                           ; Number of cases is 1, Range of values is 0 to 0
  3445                           ; switch strategies available:
  3446                           ; Name         Instructions Cycles
  3447                           ; simple_byte            4     3 (average)
  3448                           ; direct_byte           11     8 (fixed)
  3449                           ; jumptable            260     6 (fixed)
  3450                           ;	Chosen strategy is simple_byte
  3451  020A  1283               	bcf	3,5	;RP0=0, select bank0
  3452  020B  1303               	bcf	3,6	;RP1=0, select bank0
  3453  020C  082B               	movf	set_time@blink_pos+1,w
  3454  020D  3A00               	xorlw	0	; case 0
  3455  020E  1903               	skipnz
  3456  020F  2A11               	goto	l3170
  3457  0210  2A1A               	goto	l259
  3458  0211                     l3170:	
  3459                           
  3460                           ; Switch size 1, requested type "space"
  3461                           ; Number of cases is 2, Range of values is 0 to 1
  3462                           ; switch strategies available:
  3463                           ; Name         Instructions Cycles
  3464                           ; simple_byte            7     4 (average)
  3465                           ; direct_byte           14     8 (fixed)
  3466                           ; jumptable            260     6 (fixed)
  3467                           ;	Chosen strategy is simple_byte
  3468  0211  082A               	movf	set_time@blink_pos,w
  3469  0212  3A00               	xorlw	0	; case 0
  3470  0213  1903               	skipnz
  3471  0214  29F0               	goto	l2800
  3472  0215  3A01               	xorlw	1	; case 1
  3473  0216  1903               	skipnz
  3474  0217  29FC               	goto	l2802
  3475  0218  2A1A               	goto	l259
  3476  0219  0008               	return
  3477  021A                     l259:	
  3478  021A  0008               	return
  3479  021B                     __end_of_set_time:	
  3480                           
  3481                           	psect	text8
  3482  021B                     __ptext8:	
  3483 ;; *************** function _set_temp *****************
  3484 ;; Defined at:
  3485 ;;		line 380 in file "main.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  key             1    wreg     unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  key             1   19[BANK0 ] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      unsigned char 
  3492 ;; Registers used:
  3493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3499 ;;      Params:         0       0       0       0       0
  3500 ;;      Locals:         0       1       0       0       0
  3501 ;;      Temps:          0       3       0       0       0
  3502 ;;      Totals:         0       4       0       0       0
  3503 ;;Total ram usage:        4 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    3
  3506 ;; This function calls:
  3507 ;;		___awdiv
  3508 ;;		___awmod
  3509 ;;		___wmul
  3510 ;;		_clcd_print
  3511 ;;		_clcd_putch
  3512 ;;		_clear_dis
  3513 ;; This function is called by:
  3514 ;;		_mode_select
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function _set_temp
  3520  021B                     _set_temp:	
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in _set_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3524                           ;set_temp@key stored from wreg
  3525  021B  1283               	bcf	3,5	;RP0=0, select bank0
  3526  021C  1303               	bcf	3,6	;RP1=0, select bank0
  3527  021D  00D7               	movwf	set_temp@key
  3528                           
  3529                           ;main.c: 381: static int wait, blink, key_count, temp;
  3530                           ;main.c: 382: if(reset_flag == 0x14)
  3531  021E  3014               	movlw	20
  3532  021F  063A               	xorwf	_reset_flag,w
  3533  0220  043B               	iorwf	_reset_flag+1,w
  3534  0221  1D03               	btfss	3,2
  3535  0222  2A66               	goto	l2832
  3536                           
  3537                           ;main.c: 383: {
  3538                           ;main.c: 385: key = 0xFF;
  3539  0223  30FF               	movlw	255
  3540  0224  00D4               	movwf	??_set_temp
  3541  0225  0854               	movf	??_set_temp,w
  3542  0226  00D7               	movwf	set_temp@key
  3543                           
  3544                           ;main.c: 386: key_count = 0;
  3545  0227  01A2               	clrf	set_temp@key_count
  3546  0228  01A3               	clrf	set_temp@key_count+1
  3547                           
  3548                           ;main.c: 387: blink = 0;
  3549  0229  01A4               	clrf	set_temp@blink
  3550  022A  01A5               	clrf	set_temp@blink+1
  3551                           
  3552                           ;main.c: 388: temp = 0;
  3553  022B  01A0               	clrf	set_temp@temp
  3554  022C  01A1               	clrf	set_temp@temp+1
  3555                           
  3556                           ;main.c: 389: wait = 0;
  3557  022D  01A6               	clrf	set_temp@wait
  3558  022E  01A7               	clrf	set_temp@wait+1
  3559                           
  3560                           ;main.c: 390: clcd_print("SET TEMP. (  C )", (0x80 + 0));
  3561  022F  3066               	movlw	low (STR_20| (0+32768))
  3562  0230  00C5               	movwf	clcd_print@str
  3563  0231  3085               	movlw	high (STR_20| (0+32768))
  3564  0232  00C6               	movwf	clcd_print@str+1
  3565  0233  3080               	movlw	128
  3566  0234  00D4               	movwf	??_set_temp
  3567  0235  0854               	movf	??_set_temp,w
  3568  0236  00C7               	movwf	clcd_print@addr
  3569  0237  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3570                           
  3571                           ;main.c: 391: clcd_putch(0xDF, (0x80 + 12));
  3572  023C  308C               	movlw	140
  3573  023D  1283               	bcf	3,5	;RP0=0, select bank0
  3574  023E  1303               	bcf	3,6	;RP1=0, select bank0
  3575  023F  00D4               	movwf	??_set_temp
  3576  0240  0854               	movf	??_set_temp,w
  3577  0241  00D2               	movwf	clcd_putch@addr
  3578  0242  30DF               	movlw	223
  3579  0243  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  3580                           
  3581                           ;main.c: 392: clcd_print("TEMP :  000", (0xC0 + 0));
  3582  0248  30FD               	movlw	low (STR_21| (0+32768))
  3583  0249  1283               	bcf	3,5	;RP0=0, select bank0
  3584  024A  1303               	bcf	3,6	;RP1=0, select bank0
  3585  024B  00C5               	movwf	clcd_print@str
  3586  024C  3085               	movlw	high (STR_21| (0+32768))
  3587  024D  00C6               	movwf	clcd_print@str+1
  3588  024E  30C0               	movlw	192
  3589  024F  00D4               	movwf	??_set_temp
  3590  0250  0854               	movf	??_set_temp,w
  3591  0251  00C7               	movwf	clcd_print@addr
  3592  0252  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3593                           
  3594                           ;main.c: 393: clcd_print("*:CLEAR  #:ENTER", (0xD0 + 0));
  3595  0257  3099               	movlw	low (STR_10| (0+32768))
  3596  0258  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0259  1303               	bcf	3,6	;RP1=0, select bank0
  3598  025A  00C5               	movwf	clcd_print@str
  3599  025B  3085               	movlw	high (STR_10| (0+32768))
  3600  025C  00C6               	movwf	clcd_print@str+1
  3601  025D  30D0               	movlw	208
  3602  025E  00D4               	movwf	??_set_temp
  3603  025F  0854               	movf	??_set_temp,w
  3604  0260  00C7               	movwf	clcd_print@addr
  3605  0261  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3606  0266                     l2832:	
  3607                           
  3608                           ;main.c: 394: }
  3609                           ;main.c: 395: if(key != 0xFF && key != '*' && key != '#')
  3610  0266  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0267  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0268  0A57               	incf	set_temp@key,w
  3613  0269  1903               	btfsc	3,2
  3614  026A  2A9E               	goto	l2844
  3615  026B  302A               	movlw	42
  3616  026C  0657               	xorwf	set_temp@key,w
  3617  026D  1903               	btfsc	3,2
  3618  026E  2A9E               	goto	l2844
  3619  026F  3023               	movlw	35
  3620  0270  0657               	xorwf	set_temp@key,w
  3621  0271  1903               	btfsc	3,2
  3622  0272  2A9E               	goto	l2844
  3623                           
  3624                           ;main.c: 396: {
  3625                           ;main.c: 398: key_count++;
  3626  0273  3001               	movlw	1
  3627  0274  07A2               	addwf	set_temp@key_count,f
  3628  0275  1803               	skipnc
  3629  0276  0AA3               	incf	set_temp@key_count+1,f
  3630  0277  3000               	movlw	0
  3631  0278  07A3               	addwf	set_temp@key_count+1,f
  3632                           
  3633                           ;main.c: 399: if(key_count <= 3)
  3634  0279  0823               	movf	set_temp@key_count+1,w
  3635  027A  3A80               	xorlw	128
  3636  027B  00FF               	movwf	127
  3637  027C  3080               	movlw	128
  3638  027D  027F               	subwf	127,w
  3639  027E  1D03               	skipz
  3640  027F  2A82               	goto	u2805
  3641  0280  3004               	movlw	4
  3642  0281  0222               	subwf	set_temp@key_count,w
  3643  0282                     u2805:	
  3644  0282  1803               	skipnc
  3645  0283  2B75               	goto	l2888
  3646                           
  3647                           ;main.c: 400: {
  3648                           ;main.c: 401: temp = temp * 10 + key;
  3649  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3650  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3651  0286  0821               	movf	set_temp@temp+1,w
  3652  0287  00C5               	movwf	___wmul@multiplier+1
  3653  0288  0820               	movf	set_temp@temp,w
  3654  0289  00C4               	movwf	___wmul@multiplier
  3655  028A  300A               	movlw	10
  3656  028B  00C6               	movwf	___wmul@multiplicand
  3657  028C  3000               	movlw	0
  3658  028D  00C7               	movwf	___wmul@multiplicand+1
  3659  028E  120A  158A  24B3  120A  118A  	fcall	___wmul
  3660  0293  1283               	bcf	3,5	;RP0=0, select bank0
  3661  0294  1303               	bcf	3,6	;RP1=0, select bank0
  3662  0295  0857               	movf	set_temp@key,w
  3663  0296  0744               	addwf	?___wmul,w
  3664  0297  00A0               	movwf	set_temp@temp
  3665  0298  3000               	movlw	0
  3666  0299  1803               	skipnc
  3667  029A  3001               	movlw	1
  3668  029B  0745               	addwf	?___wmul+1,w
  3669  029C  00A1               	movwf	set_temp@temp+1
  3670                           
  3671                           ;main.c: 402: }
  3672                           ;main.c: 404: }
  3673  029D  2B75               	goto	l2888
  3674  029E                     l2844:	
  3675                           
  3676                           ;main.c: 405: else if(key == '*')
  3677  029E  302A               	movlw	42
  3678  029F  0657               	xorwf	set_temp@key,w
  3679  02A0  1D03               	btfss	3,2
  3680  02A1  2AA7               	goto	l2848
  3681                           
  3682                           ;main.c: 406: {
  3683                           ;main.c: 407: key_count = 0;
  3684  02A2  01A2               	clrf	set_temp@key_count
  3685  02A3  01A3               	clrf	set_temp@key_count+1
  3686                           
  3687                           ;main.c: 408: temp = 0;
  3688  02A4  01A0               	clrf	set_temp@temp
  3689  02A5  01A1               	clrf	set_temp@temp+1
  3690                           
  3691                           ;main.c: 409: }
  3692  02A6  2B75               	goto	l2888
  3693  02A7                     l2848:	
  3694                           
  3695                           ;main.c: 410: else if(key == '#')
  3696  02A7  3023               	movlw	35
  3697  02A8  0657               	xorwf	set_temp@key,w
  3698  02A9  1D03               	btfss	3,2
  3699  02AA  2B75               	goto	l2888
  3700                           
  3701                           ;main.c: 411: {
  3702                           ;main.c: 412: clear_dis();
  3703  02AB  120A  158A  243B  120A  118A  	fcall	_clear_dis
  3704                           
  3705                           ;main.c: 413: if(temp > 250)
  3706  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  3707  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  3708  02B2  0821               	movf	set_temp@temp+1,w
  3709  02B3  3A80               	xorlw	128
  3710  02B4  00FF               	movwf	127
  3711  02B5  3080               	movlw	128
  3712  02B6  027F               	subwf	127,w
  3713  02B7  1D03               	skipz
  3714  02B8  2ABB               	goto	u2835
  3715  02B9  30FB               	movlw	251
  3716  02BA  0220               	subwf	set_temp@temp,w
  3717  02BB                     u2835:	
  3718  02BB  1C03               	skipc
  3719  02BC  2AE5               	goto	l2870
  3720                           
  3721                           ;main.c: 414: {
  3722                           ;main.c: 415: clcd_print(" Invalid Temp.", (0xC0 + 0));
  3723  02BD  30BA               	movlw	low (STR_23| (0+32768))
  3724  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  3725  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  3726  02C0  00C5               	movwf	clcd_print@str
  3727  02C1  3085               	movlw	high (STR_23| (0+32768))
  3728  02C2  00C6               	movwf	clcd_print@str+1
  3729  02C3  30C0               	movlw	192
  3730  02C4  00D4               	movwf	??_set_temp
  3731  02C5  0854               	movf	??_set_temp,w
  3732  02C6  00C7               	movwf	clcd_print@addr
  3733  02C7  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3734                           
  3735                           ;main.c: 416: RC1 = 1;
  3736  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  3737  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  3738  02CE  1487               	bsf	7,1	;volatile
  3739                           
  3740                           ;main.c: 417: _delay((unsigned long)((2000)*(20000000/4000.0)));
  3741  02CF  3033               	movlw	51
  3742  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3743  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3744  02D2  00D6               	movwf	??_set_temp+2
  3745  02D3  30BB               	movlw	187
  3746  02D4  00D5               	movwf	??_set_temp+1
  3747  02D5  30DF               	movlw	223
  3748  02D6  00D4               	movwf	??_set_temp
  3749  02D7                     u3177:	
  3750  02D7  0BD4               	decfsz	??_set_temp,f
  3751  02D8  2AD7               	goto	u3177
  3752  02D9  0BD5               	decfsz	??_set_temp+1,f
  3753  02DA  2AD7               	goto	u3177
  3754  02DB  0BD6               	decfsz	??_set_temp+2,f
  3755  02DC  2AD7               	goto	u3177
  3756                           
  3757                           ;main.c: 418: RC1 = 0;
  3758  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  3759  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  3760  02DF  1087               	bcf	7,1	;volatile
  3761                           
  3762                           ;main.c: 419: clear_dis();
  3763  02E0  120A  158A  243B   	fcall	_clear_dis
  3764                           
  3765                           ;main.c: 420: return 1;
  3766  02E3  3001               	movlw	1
  3767  02E4  0008               	return
  3768  02E5                     l2870:	
  3769                           ;main.c: 421: }
  3770                           
  3771                           
  3772                           ;main.c: 422: else
  3773                           ;main.c: 423: {
  3774                           ;main.c: 424: clcd_print("  Pre-Heating", (0x80 + 0));
  3775  02E5  30C9               	movlw	low (STR_24| (0+32768))
  3776  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  3777  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  3778  02E8  00C5               	movwf	clcd_print@str
  3779  02E9  3085               	movlw	high (STR_24| (0+32768))
  3780  02EA  00C6               	movwf	clcd_print@str+1
  3781  02EB  3080               	movlw	128
  3782  02EC  00D4               	movwf	??_set_temp
  3783  02ED  0854               	movf	??_set_temp,w
  3784  02EE  00C7               	movwf	clcd_print@addr
  3785  02EF  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3786                           
  3787                           ;main.c: 425: sec = 180;
  3788  02F4  30B4               	movlw	180
  3789  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  3790  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  3791  02F7  00B6               	movwf	_sec
  3792  02F8  3000               	movlw	0
  3793  02F9  00B7               	movwf	_sec+1
  3794                           
  3795                           ;main.c: 426: TMR2ON = 1;
  3796  02FA  1512               	bsf	18,2	;volatile
  3797                           
  3798                           ;main.c: 427: RC2 = 1;
  3799  02FB  1507               	bsf	7,2	;volatile
  3800                           
  3801                           ;main.c: 429: clcd_print("Time Rem.= ",(0x90 + 0));
  3802  02FC  30F1               	movlw	low (STR_25| (0+32768))
  3803  02FD  00C5               	movwf	clcd_print@str
  3804  02FE  3085               	movlw	high (STR_25| (0+32768))
  3805  02FF  00C6               	movwf	clcd_print@str+1
  3806  0300  3090               	movlw	144
  3807  0301  00D4               	movwf	??_set_temp
  3808  0302  0854               	movf	??_set_temp,w
  3809  0303  00C7               	movwf	clcd_print@addr
  3810  0304  120A  118A  27CB  120A  118A  	fcall	_clcd_print
  3811  0309                     l2882:	
  3812                           ;main.c: 430: while(sec)
  3813                           
  3814  0309  1283               	bcf	3,5	;RP0=0, select bank0
  3815  030A  1303               	bcf	3,6	;RP1=0, select bank0
  3816  030B  0836               	movf	_sec,w
  3817  030C  0437               	iorwf	_sec+1,w
  3818  030D  1903               	btfsc	3,2
  3819  030E  2B73               	goto	l2884
  3820                           
  3821                           ;main.c: 431: {
  3822                           ;main.c: 432: clcd_putch((sec / 100 + '0'), (0x90 + 11));
  3823  030F  309B               	movlw	155
  3824  0310  1283               	bcf	3,5	;RP0=0, select bank0
  3825  0311  1303               	bcf	3,6	;RP1=0, select bank0
  3826  0312  00D4               	movwf	??_set_temp
  3827  0313  0854               	movf	??_set_temp,w
  3828  0314  00D2               	movwf	clcd_putch@addr
  3829  0315  3064               	movlw	100
  3830  0316  00C4               	movwf	___awdiv@divisor
  3831  0317  3000               	movlw	0
  3832  0318  00C5               	movwf	___awdiv@divisor+1
  3833  0319  0837               	movf	_sec+1,w
  3834  031A  00C7               	movwf	___awdiv@dividend+1
  3835  031B  0836               	movf	_sec,w
  3836  031C  00C6               	movwf	___awdiv@dividend
  3837  031D  120A  158A  261C  120A  118A  	fcall	___awdiv
  3838  0322  1283               	bcf	3,5	;RP0=0, select bank0
  3839  0323  1303               	bcf	3,6	;RP1=0, select bank0
  3840  0324  0844               	movf	?___awdiv,w
  3841  0325  3E30               	addlw	48
  3842  0326  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  3843                           
  3844                           ;main.c: 433: clcd_putch(((sec/10) % 10 + '0'), (0x90 + 12));
  3845  032B  309C               	movlw	156
  3846  032C  1283               	bcf	3,5	;RP0=0, select bank0
  3847  032D  1303               	bcf	3,6	;RP1=0, select bank0
  3848  032E  00D4               	movwf	??_set_temp
  3849  032F  0854               	movf	??_set_temp,w
  3850  0330  00D2               	movwf	clcd_putch@addr
  3851  0331  300A               	movlw	10
  3852  0332  00CC               	movwf	___awmod@divisor
  3853  0333  3000               	movlw	0
  3854  0334  00CD               	movwf	___awmod@divisor+1
  3855  0335  300A               	movlw	10
  3856  0336  00C4               	movwf	___awdiv@divisor
  3857  0337  3000               	movlw	0
  3858  0338  00C5               	movwf	___awdiv@divisor+1
  3859  0339  0837               	movf	_sec+1,w
  3860  033A  00C7               	movwf	___awdiv@dividend+1
  3861  033B  0836               	movf	_sec,w
  3862  033C  00C6               	movwf	___awdiv@dividend
  3863  033D  120A  158A  261C  120A  118A  	fcall	___awdiv
  3864  0342  1283               	bcf	3,5	;RP0=0, select bank0
  3865  0343  1303               	bcf	3,6	;RP1=0, select bank0
  3866  0344  0845               	movf	?___awdiv+1,w
  3867  0345  00CF               	movwf	___awmod@dividend+1
  3868  0346  0844               	movf	?___awdiv,w
  3869  0347  00CE               	movwf	___awmod@dividend
  3870  0348  120A  158A  257F  120A  118A  	fcall	___awmod
  3871  034D  1283               	bcf	3,5	;RP0=0, select bank0
  3872  034E  1303               	bcf	3,6	;RP1=0, select bank0
  3873  034F  084C               	movf	?___awmod,w
  3874  0350  3E30               	addlw	48
  3875  0351  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  3876                           
  3877                           ;main.c: 434: clcd_putch((sec%10 + '0'), (0x90 + 13));
  3878  0356  309D               	movlw	157
  3879  0357  1283               	bcf	3,5	;RP0=0, select bank0
  3880  0358  1303               	bcf	3,6	;RP1=0, select bank0
  3881  0359  00D4               	movwf	??_set_temp
  3882  035A  0854               	movf	??_set_temp,w
  3883  035B  00D2               	movwf	clcd_putch@addr
  3884  035C  300A               	movlw	10
  3885  035D  00CC               	movwf	___awmod@divisor
  3886  035E  3000               	movlw	0
  3887  035F  00CD               	movwf	___awmod@divisor+1
  3888  0360  0837               	movf	_sec+1,w
  3889  0361  00CF               	movwf	___awmod@dividend+1
  3890  0362  0836               	movf	_sec,w
  3891  0363  00CE               	movwf	___awmod@dividend
  3892  0364  120A  158A  257F  120A  118A  	fcall	___awmod
  3893  0369  1283               	bcf	3,5	;RP0=0, select bank0
  3894  036A  1303               	bcf	3,6	;RP1=0, select bank0
  3895  036B  084C               	movf	?___awmod,w
  3896  036C  3E30               	addlw	48
  3897  036D  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  3898  0372  2B09               	goto	l2882
  3899  0373                     l2884:	
  3900                           
  3901                           ;main.c: 435: }
  3902                           ;main.c: 436: return 0;
  3903  0373  3000               	movlw	0
  3904  0374  0008               	return
  3905  0375                     l2888:	
  3906                           
  3907                           ;main.c: 437: }
  3908                           ;main.c: 438: }
  3909                           ;main.c: 439: if(wait++ == 25)
  3910  0375  3001               	movlw	1
  3911  0376  1283               	bcf	3,5	;RP0=0, select bank0
  3912  0377  1303               	bcf	3,6	;RP1=0, select bank0
  3913  0378  07A6               	addwf	set_temp@wait,f
  3914  0379  1803               	skipnc
  3915  037A  0AA7               	incf	set_temp@wait+1,f
  3916  037B  3000               	movlw	0
  3917  037C  07A7               	addwf	set_temp@wait+1,f
  3918  037D  301A               	movlw	26
  3919  037E  0626               	xorwf	set_temp@wait,w
  3920  037F  0427               	iorwf	set_temp@wait+1,w
  3921  0380  1D03               	btfss	3,2
  3922  0381  2BF2               	goto	l2900
  3923                           
  3924                           ;main.c: 440: {
  3925                           ;main.c: 441: wait = 0;
  3926  0382  01A6               	clrf	set_temp@wait
  3927  0383  01A7               	clrf	set_temp@wait+1
  3928                           
  3929                           ;main.c: 442: blink = !blink;
  3930  0384  0824               	movf	set_temp@blink,w
  3931  0385  0425               	iorwf	set_temp@blink+1,w
  3932  0386  1D03               	btfss	3,2
  3933  0387  2B8A               	goto	u2860
  3934  0388  3001               	movlw	1
  3935  0389  2B8B               	goto	u2870
  3936  038A                     u2860:	
  3937  038A  3000               	movlw	0
  3938  038B                     u2870:	
  3939  038B  00D4               	movwf	??_set_temp
  3940  038C  01D5               	clrf	??_set_temp+1
  3941  038D  0854               	movf	??_set_temp,w
  3942  038E  00A4               	movwf	set_temp@blink
  3943  038F  0855               	movf	??_set_temp+1,w
  3944  0390  00A5               	movwf	set_temp@blink+1
  3945                           
  3946                           ;main.c: 443: clcd_putch((temp / 100 + '0'), (0xC0 + 8));
  3947  0391  30C8               	movlw	200
  3948  0392  00D4               	movwf	??_set_temp
  3949  0393  0854               	movf	??_set_temp,w
  3950  0394  00D2               	movwf	clcd_putch@addr
  3951  0395  3064               	movlw	100
  3952  0396  00C4               	movwf	___awdiv@divisor
  3953  0397  3000               	movlw	0
  3954  0398  00C5               	movwf	___awdiv@divisor+1
  3955  0399  0821               	movf	set_temp@temp+1,w
  3956  039A  00C7               	movwf	___awdiv@dividend+1
  3957  039B  0820               	movf	set_temp@temp,w
  3958  039C  00C6               	movwf	___awdiv@dividend
  3959  039D  120A  158A  261C  120A  118A  	fcall	___awdiv
  3960  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3961  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  3962  03A4  0844               	movf	?___awdiv,w
  3963  03A5  3E30               	addlw	48
  3964  03A6  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  3965                           
  3966                           ;main.c: 444: clcd_putch(((temp/10) % 10 + '0'), (0xC0 + 9));
  3967  03AB  30C9               	movlw	201
  3968  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  3969  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  3970  03AE  00D4               	movwf	??_set_temp
  3971  03AF  0854               	movf	??_set_temp,w
  3972  03B0  00D2               	movwf	clcd_putch@addr
  3973  03B1  300A               	movlw	10
  3974  03B2  00CC               	movwf	___awmod@divisor
  3975  03B3  3000               	movlw	0
  3976  03B4  00CD               	movwf	___awmod@divisor+1
  3977  03B5  300A               	movlw	10
  3978  03B6  00C4               	movwf	___awdiv@divisor
  3979  03B7  3000               	movlw	0
  3980  03B8  00C5               	movwf	___awdiv@divisor+1
  3981  03B9  0821               	movf	set_temp@temp+1,w
  3982  03BA  00C7               	movwf	___awdiv@dividend+1
  3983  03BB  0820               	movf	set_temp@temp,w
  3984  03BC  00C6               	movwf	___awdiv@dividend
  3985  03BD  120A  158A  261C  120A  118A  	fcall	___awdiv
  3986  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  3987  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  3988  03C4  0845               	movf	?___awdiv+1,w
  3989  03C5  00CF               	movwf	___awmod@dividend+1
  3990  03C6  0844               	movf	?___awdiv,w
  3991  03C7  00CE               	movwf	___awmod@dividend
  3992  03C8  120A  158A  257F  120A  118A  	fcall	___awmod
  3993  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  3994  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  3995  03CF  084C               	movf	?___awmod,w
  3996  03D0  3E30               	addlw	48
  3997  03D1  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  3998                           
  3999                           ;main.c: 445: clcd_putch((temp%10 + '0'), (0xC0 + 10));
  4000  03D6  30CA               	movlw	202
  4001  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  4002  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  4003  03D9  00D4               	movwf	??_set_temp
  4004  03DA  0854               	movf	??_set_temp,w
  4005  03DB  00D2               	movwf	clcd_putch@addr
  4006  03DC  300A               	movlw	10
  4007  03DD  00CC               	movwf	___awmod@divisor
  4008  03DE  3000               	movlw	0
  4009  03DF  00CD               	movwf	___awmod@divisor+1
  4010  03E0  0821               	movf	set_temp@temp+1,w
  4011  03E1  00CF               	movwf	___awmod@dividend+1
  4012  03E2  0820               	movf	set_temp@temp,w
  4013  03E3  00CE               	movwf	___awmod@dividend
  4014  03E4  120A  158A  257F  120A  118A  	fcall	___awmod
  4015  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  4016  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  4017  03EB  084C               	movf	?___awmod,w
  4018  03EC  3E30               	addlw	48
  4019  03ED  120A  158A  2462  120A  118A  	fcall	_clcd_putch
  4020  03F2                     l2900:	
  4021                           
  4022                           ;main.c: 446: }
  4023                           ;main.c: 447: if(blink)
  4024  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  4025  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  4026  03F4  0824               	movf	set_temp@blink,w
  4027  03F5  0425               	iorwf	set_temp@blink+1,w
  4028  03F6  1903               	btfsc	3,2
  4029  03F7  2C03               	goto	l2904
  4030                           
  4031                           ;main.c: 448: {
  4032                           ;main.c: 449: clcd_print("   ", (0xC0 + 8));
  4033  03F8  300D               	movlw	low ((STR_18+13)| (0+32768))
  4034  03F9  00C5               	movwf	clcd_print@str
  4035  03FA  3085               	movlw	high ((STR_18+13)| (0+32768))
  4036  03FB  00C6               	movwf	clcd_print@str+1
  4037  03FC  30C8               	movlw	200
  4038  03FD  00D4               	movwf	??_set_temp
  4039  03FE  0854               	movf	??_set_temp,w
  4040  03FF  00C7               	movwf	clcd_print@addr
  4041  0400  120A  118A  27CB   	fcall	_clcd_print
  4042  0403                     l2904:	
  4043                           
  4044                           ;main.c: 450: }
  4045                           ;main.c: 451: return 0x11;
  4046  0403  3011               	movlw	17
  4047  0404  0008               	return
  4048  0405                     __end_of_set_temp:	
  4049                           
  4050                           	psect	text9
  4051  0C3B                     __ptext9:	
  4052 ;; *************** function _clear_dis *****************
  4053 ;; Defined at:
  4054 ;;		line 207 in file "main.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;		None
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, status,2, status,0, pclath, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4068 ;;      Params:         0       0       0       0       0
  4069 ;;      Locals:         0       0       0       0       0
  4070 ;;      Temps:          0       0       0       0       0
  4071 ;;      Totals:         0       0       0       0       0
  4072 ;;Total ram usage:        0 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    2
  4075 ;; This function calls:
  4076 ;;		_clcd_write
  4077 ;; This function is called by:
  4078 ;;		_main
  4079 ;;		_mode_select
  4080 ;;		_set_time
  4081 ;;		_door_status_check
  4082 ;;		_time_dis
  4083 ;;		_set_temp
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           
  4088                           ;psect for function _clear_dis
  4089  0C3B                     _clear_dis:	
  4090                           
  4091                           ;main.c: 209: clcd_write(0x01, 0);
  4092                           
  4093                           ;incstack = 0
  4094                           ; Regs used in _clear_dis: [wreg+status,2+status,0+pclath+cstack]
  4095  0C3B  01F4               	clrf	clcd_write@mode
  4096  0C3C  3001               	movlw	1
  4097  0C3D  120A  158A  24D6   	fcall	_clcd_write
  4098  0C40  0008               	return
  4099  0C41                     __end_of_clear_dis:	
  4100                           
  4101                           	psect	text10
  4102  0C62                     __ptext10:	
  4103 ;; *************** function _clcd_putch *****************
  4104 ;; Defined at:
  4105 ;;		line 56 in file "clcd.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;  data            1    wreg     const unsigned char 
  4108 ;;  addr            1   14[BANK0 ] unsigned char 
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  data            1   15[BANK0 ] const unsigned char 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      void 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0, pclath, cstack
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4120 ;;      Params:         0       1       0       0       0
  4121 ;;      Locals:         0       1       0       0       0
  4122 ;;      Temps:          0       0       0       0       0
  4123 ;;      Totals:         0       2       0       0       0
  4124 ;;Total ram usage:        2 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    2
  4127 ;; This function calls:
  4128 ;;		_clcd_write
  4129 ;; This function is called by:
  4130 ;;		_power_on
  4131 ;;		_time_dis
  4132 ;;		_set_temp
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           
  4137                           ;psect for function _clcd_putch
  4138  0C62                     _clcd_putch:	
  4139                           
  4140                           ;incstack = 0
  4141                           ; Regs used in _clcd_putch: [wreg+status,2+status,0+pclath+cstack]
  4142                           ;clcd_putch@data stored from wreg
  4143  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  4144  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  4145  0C64  00D3               	movwf	clcd_putch@data
  4146                           
  4147                           ;clcd.c: 58: clcd_write(addr, 0);
  4148  0C65  01F4               	clrf	clcd_write@mode
  4149  0C66  0852               	movf	clcd_putch@addr,w
  4150  0C67  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  4151                           
  4152                           ;clcd.c: 59: clcd_write(data, 1);
  4153  0C6C  01F4               	clrf	clcd_write@mode
  4154  0C6D  0AF4               	incf	clcd_write@mode,f
  4155  0C6E  1283               	bcf	3,5	;RP0=0, select bank0
  4156  0C6F  1303               	bcf	3,6	;RP1=0, select bank0
  4157  0C70  0853               	movf	clcd_putch@data,w
  4158  0C71  120A  158A  24D6   	fcall	_clcd_write
  4159  0C74  0008               	return
  4160  0C75                     __end_of_clcd_putch:	
  4161                           
  4162                           	psect	text11
  4163  0CB3                     __ptext11:	
  4164 ;; *************** function ___wmul *****************
  4165 ;; Defined at:
  4166 ;;		line 15 in file "G:\APPs\MPLAB\New folder\sources\common\Umul16.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4169 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  product         2    4[COMMON] unsigned int 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  2    0[BANK0 ] unsigned int 
  4174 ;; Registers used:
  4175 ;;		wreg, status,2, status,0
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4181 ;;      Params:         0       4       0       0       0
  4182 ;;      Locals:         2       0       0       0       0
  4183 ;;      Temps:          0       0       0       0       0
  4184 ;;      Totals:         2       4       0       0       0
  4185 ;;Total ram usage:        6 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    1
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_set_time
  4192 ;;		_set_temp
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           
  4197                           ;psect for function ___wmul
  4198  0CB3                     ___wmul:	
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4202  0CB3  01F4               	clrf	___wmul@product
  4203  0CB4  01F5               	clrf	___wmul@product+1
  4204  0CB5                     l2500:	
  4205  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  4207  0CB7  1C44               	btfss	___wmul@multiplier,0
  4208  0CB8  2CBF               	goto	l408
  4209  0CB9  0846               	movf	___wmul@multiplicand,w
  4210  0CBA  07F4               	addwf	___wmul@product,f
  4211  0CBB  1803               	skipnc
  4212  0CBC  0AF5               	incf	___wmul@product+1,f
  4213  0CBD  0847               	movf	___wmul@multiplicand+1,w
  4214  0CBE  07F5               	addwf	___wmul@product+1,f
  4215  0CBF                     l408:	
  4216  0CBF  3001               	movlw	1
  4217  0CC0                     u2265:	
  4218  0CC0  1003               	clrc
  4219  0CC1  0DC6               	rlf	___wmul@multiplicand,f
  4220  0CC2  0DC7               	rlf	___wmul@multiplicand+1,f
  4221  0CC3  3EFF               	addlw	-1
  4222  0CC4  1D03               	skipz
  4223  0CC5  2CC0               	goto	u2265
  4224  0CC6  3001               	movlw	1
  4225  0CC7                     u2275:	
  4226  0CC7  1003               	clrc
  4227  0CC8  0CC5               	rrf	___wmul@multiplier+1,f
  4228  0CC9  0CC4               	rrf	___wmul@multiplier,f
  4229  0CCA  3EFF               	addlw	-1
  4230  0CCB  1D03               	skipz
  4231  0CCC  2CC7               	goto	u2275
  4232  0CCD  0844               	movf	___wmul@multiplier,w
  4233  0CCE  0445               	iorwf	___wmul@multiplier+1,w
  4234  0CCF  1D03               	btfss	3,2
  4235  0CD0  2CB5               	goto	l2500
  4236  0CD1  0875               	movf	___wmul@product+1,w
  4237  0CD2  00C5               	movwf	?___wmul+1
  4238  0CD3  0874               	movf	___wmul@product,w
  4239  0CD4  00C4               	movwf	?___wmul
  4240  0CD5  0008               	return
  4241  0CD6                     __end_of___wmul:	
  4242                           
  4243                           	psect	text12
  4244  0D7F                     __ptext12:	
  4245 ;; *************** function ___awmod *****************
  4246 ;; Defined at:
  4247 ;;		line 6 in file "G:\APPs\MPLAB\New folder\sources\common\awmod.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  divisor         2    8[BANK0 ] int 
  4250 ;;  dividend        2   10[BANK0 ] int 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  sign            1   13[BANK0 ] unsigned char 
  4253 ;;  counter         1   12[BANK0 ] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  2    8[BANK0 ] int 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4263 ;;      Params:         0       4       0       0       0
  4264 ;;      Locals:         0       2       0       0       0
  4265 ;;      Temps:          1       0       0       0       0
  4266 ;;      Totals:         1       6       0       0       0
  4267 ;;Total ram usage:        7 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    1
  4270 ;; This function calls:
  4271 ;;		Nothing
  4272 ;; This function is called by:
  4273 ;;		_set_time
  4274 ;;		_time_dis
  4275 ;;		_set_temp
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function ___awmod
  4281  0D7F                     ___awmod:	
  4282                           
  4283                           ;incstack = 0
  4284                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4285  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  4286  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  4287  0D81  01D1               	clrf	___awmod@sign
  4288  0D82  1FCF               	btfss	___awmod@dividend+1,7
  4289  0D83  2D8B               	goto	l1744
  4290  0D84  09CE               	comf	___awmod@dividend,f
  4291  0D85  09CF               	comf	___awmod@dividend+1,f
  4292  0D86  0ACE               	incf	___awmod@dividend,f
  4293  0D87  1903               	skipnz
  4294  0D88  0ACF               	incf	___awmod@dividend+1,f
  4295  0D89  01D1               	clrf	___awmod@sign
  4296  0D8A  0AD1               	incf	___awmod@sign,f
  4297  0D8B                     l1744:	
  4298  0D8B  1FCD               	btfss	___awmod@divisor+1,7
  4299  0D8C  2D92               	goto	l1748
  4300  0D8D  09CC               	comf	___awmod@divisor,f
  4301  0D8E  09CD               	comf	___awmod@divisor+1,f
  4302  0D8F  0ACC               	incf	___awmod@divisor,f
  4303  0D90  1903               	skipnz
  4304  0D91  0ACD               	incf	___awmod@divisor+1,f
  4305  0D92                     l1748:	
  4306  0D92  084C               	movf	___awmod@divisor,w
  4307  0D93  044D               	iorwf	___awmod@divisor+1,w
  4308  0D94  1903               	btfsc	3,2
  4309  0D95  2DBF               	goto	l1766
  4310  0D96  01D0               	clrf	___awmod@counter
  4311  0D97  0AD0               	incf	___awmod@counter,f
  4312  0D98                     l1756:	
  4313  0D98  1BCD               	btfsc	___awmod@divisor+1,7
  4314  0D99  2DA6               	goto	l1758
  4315  0D9A  3001               	movlw	1
  4316  0D9B                     u1335:	
  4317  0D9B  1003               	clrc
  4318  0D9C  0DCC               	rlf	___awmod@divisor,f
  4319  0D9D  0DCD               	rlf	___awmod@divisor+1,f
  4320  0D9E  3EFF               	addlw	-1
  4321  0D9F  1D03               	skipz
  4322  0DA0  2D9B               	goto	u1335
  4323  0DA1  3001               	movlw	1
  4324  0DA2  00F5               	movwf	??___awmod
  4325  0DA3  0875               	movf	??___awmod,w
  4326  0DA4  07D0               	addwf	___awmod@counter,f
  4327  0DA5  2D98               	goto	l1756
  4328  0DA6                     l1758:	
  4329  0DA6  084D               	movf	___awmod@divisor+1,w
  4330  0DA7  024F               	subwf	___awmod@dividend+1,w
  4331  0DA8  1D03               	skipz
  4332  0DA9  2DAC               	goto	u1355
  4333  0DAA  084C               	movf	___awmod@divisor,w
  4334  0DAB  024E               	subwf	___awmod@dividend,w
  4335  0DAC                     u1355:	
  4336  0DAC  1C03               	skipc
  4337  0DAD  2DB4               	goto	l1762
  4338  0DAE  084C               	movf	___awmod@divisor,w
  4339  0DAF  02CE               	subwf	___awmod@dividend,f
  4340  0DB0  084D               	movf	___awmod@divisor+1,w
  4341  0DB1  1C03               	skipc
  4342  0DB2  03CF               	decf	___awmod@dividend+1,f
  4343  0DB3  02CF               	subwf	___awmod@dividend+1,f
  4344  0DB4                     l1762:	
  4345  0DB4  3001               	movlw	1
  4346  0DB5                     u1365:	
  4347  0DB5  1003               	clrc
  4348  0DB6  0CCD               	rrf	___awmod@divisor+1,f
  4349  0DB7  0CCC               	rrf	___awmod@divisor,f
  4350  0DB8  3EFF               	addlw	-1
  4351  0DB9  1D03               	skipz
  4352  0DBA  2DB5               	goto	u1365
  4353  0DBB  3001               	movlw	1
  4354  0DBC  02D0               	subwf	___awmod@counter,f
  4355  0DBD  1D03               	btfss	3,2
  4356  0DBE  2DA6               	goto	l1758
  4357  0DBF                     l1766:	
  4358  0DBF  0851               	movf	___awmod@sign,w
  4359  0DC0  1903               	btfsc	3,2
  4360  0DC1  2DC7               	goto	l1770
  4361  0DC2  09CE               	comf	___awmod@dividend,f
  4362  0DC3  09CF               	comf	___awmod@dividend+1,f
  4363  0DC4  0ACE               	incf	___awmod@dividend,f
  4364  0DC5  1903               	skipnz
  4365  0DC6  0ACF               	incf	___awmod@dividend+1,f
  4366  0DC7                     l1770:	
  4367  0DC7  084F               	movf	___awmod@dividend+1,w
  4368  0DC8  00CD               	movwf	?___awmod+1
  4369  0DC9  084E               	movf	___awmod@dividend,w
  4370  0DCA  00CC               	movwf	?___awmod
  4371  0DCB  0008               	return
  4372  0DCC                     __end_of___awmod:	
  4373                           
  4374                           	psect	text13
  4375  0E1C                     __ptext13:	
  4376 ;; *************** function ___awdiv *****************
  4377 ;; Defined at:
  4378 ;;		line 6 in file "G:\APPs\MPLAB\New folder\sources\common\awdiv.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  divisor         2    0[BANK0 ] int 
  4381 ;;  dividend        2    2[BANK0 ] int 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  quotient        2    6[BANK0 ] int 
  4384 ;;  sign            1    5[BANK0 ] unsigned char 
  4385 ;;  counter         1    4[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  2    0[BANK0 ] int 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4395 ;;      Params:         0       4       0       0       0
  4396 ;;      Locals:         0       4       0       0       0
  4397 ;;      Temps:          1       0       0       0       0
  4398 ;;      Totals:         1       8       0       0       0
  4399 ;;Total ram usage:        9 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    1
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_set_time
  4406 ;;		_time_dis
  4407 ;;		_set_temp
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function ___awdiv
  4413  0E1C                     ___awdiv:	
  4414                           
  4415                           ;incstack = 0
  4416                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4417  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  4418  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  4419  0E1E  01C9               	clrf	___awdiv@sign
  4420  0E1F  1FC5               	btfss	___awdiv@divisor+1,7
  4421  0E20  2E28               	goto	l2520
  4422  0E21  09C4               	comf	___awdiv@divisor,f
  4423  0E22  09C5               	comf	___awdiv@divisor+1,f
  4424  0E23  0AC4               	incf	___awdiv@divisor,f
  4425  0E24  1903               	skipnz
  4426  0E25  0AC5               	incf	___awdiv@divisor+1,f
  4427  0E26  01C9               	clrf	___awdiv@sign
  4428  0E27  0AC9               	incf	___awdiv@sign,f
  4429  0E28                     l2520:	
  4430  0E28  1FC7               	btfss	___awdiv@dividend+1,7
  4431  0E29  2E33               	goto	l2526
  4432  0E2A  09C6               	comf	___awdiv@dividend,f
  4433  0E2B  09C7               	comf	___awdiv@dividend+1,f
  4434  0E2C  0AC6               	incf	___awdiv@dividend,f
  4435  0E2D  1903               	skipnz
  4436  0E2E  0AC7               	incf	___awdiv@dividend+1,f
  4437  0E2F  3001               	movlw	1
  4438  0E30  00F4               	movwf	??___awdiv
  4439  0E31  0874               	movf	??___awdiv,w
  4440  0E32  06C9               	xorwf	___awdiv@sign,f
  4441  0E33                     l2526:	
  4442  0E33  01CA               	clrf	___awdiv@quotient
  4443  0E34  01CB               	clrf	___awdiv@quotient+1
  4444  0E35  0844               	movf	___awdiv@divisor,w
  4445  0E36  0445               	iorwf	___awdiv@divisor+1,w
  4446  0E37  1903               	btfsc	3,2
  4447  0E38  2E6A               	goto	l2548
  4448  0E39  01C8               	clrf	___awdiv@counter
  4449  0E3A  0AC8               	incf	___awdiv@counter,f
  4450  0E3B                     l2536:	
  4451  0E3B  1BC5               	btfsc	___awdiv@divisor+1,7
  4452  0E3C  2E49               	goto	l2538
  4453  0E3D  3001               	movlw	1
  4454  0E3E                     u2325:	
  4455  0E3E  1003               	clrc
  4456  0E3F  0DC4               	rlf	___awdiv@divisor,f
  4457  0E40  0DC5               	rlf	___awdiv@divisor+1,f
  4458  0E41  3EFF               	addlw	-1
  4459  0E42  1D03               	skipz
  4460  0E43  2E3E               	goto	u2325
  4461  0E44  3001               	movlw	1
  4462  0E45  00F4               	movwf	??___awdiv
  4463  0E46  0874               	movf	??___awdiv,w
  4464  0E47  07C8               	addwf	___awdiv@counter,f
  4465  0E48  2E3B               	goto	l2536
  4466  0E49                     l2538:	
  4467  0E49  3001               	movlw	1
  4468  0E4A                     u2345:	
  4469  0E4A  1003               	clrc
  4470  0E4B  0DCA               	rlf	___awdiv@quotient,f
  4471  0E4C  0DCB               	rlf	___awdiv@quotient+1,f
  4472  0E4D  3EFF               	addlw	-1
  4473  0E4E  1D03               	skipz
  4474  0E4F  2E4A               	goto	u2345
  4475  0E50  0845               	movf	___awdiv@divisor+1,w
  4476  0E51  0247               	subwf	___awdiv@dividend+1,w
  4477  0E52  1D03               	skipz
  4478  0E53  2E56               	goto	u2355
  4479  0E54  0844               	movf	___awdiv@divisor,w
  4480  0E55  0246               	subwf	___awdiv@dividend,w
  4481  0E56                     u2355:	
  4482  0E56  1C03               	skipc
  4483  0E57  2E5F               	goto	l2544
  4484  0E58  0844               	movf	___awdiv@divisor,w
  4485  0E59  02C6               	subwf	___awdiv@dividend,f
  4486  0E5A  0845               	movf	___awdiv@divisor+1,w
  4487  0E5B  1C03               	skipc
  4488  0E5C  03C7               	decf	___awdiv@dividend+1,f
  4489  0E5D  02C7               	subwf	___awdiv@dividend+1,f
  4490  0E5E  144A               	bsf	___awdiv@quotient,0
  4491  0E5F                     l2544:	
  4492  0E5F  3001               	movlw	1
  4493  0E60                     u2365:	
  4494  0E60  1003               	clrc
  4495  0E61  0CC5               	rrf	___awdiv@divisor+1,f
  4496  0E62  0CC4               	rrf	___awdiv@divisor,f
  4497  0E63  3EFF               	addlw	-1
  4498  0E64  1D03               	skipz
  4499  0E65  2E60               	goto	u2365
  4500  0E66  3001               	movlw	1
  4501  0E67  02C8               	subwf	___awdiv@counter,f
  4502  0E68  1D03               	btfss	3,2
  4503  0E69  2E49               	goto	l2538
  4504  0E6A                     l2548:	
  4505  0E6A  0849               	movf	___awdiv@sign,w
  4506  0E6B  1903               	btfsc	3,2
  4507  0E6C  2E72               	goto	l2552
  4508  0E6D  09CA               	comf	___awdiv@quotient,f
  4509  0E6E  09CB               	comf	___awdiv@quotient+1,f
  4510  0E6F  0ACA               	incf	___awdiv@quotient,f
  4511  0E70  1903               	skipnz
  4512  0E71  0ACB               	incf	___awdiv@quotient+1,f
  4513  0E72                     l2552:	
  4514  0E72  084B               	movf	___awdiv@quotient+1,w
  4515  0E73  00C5               	movwf	?___awdiv+1
  4516  0E74  084A               	movf	___awdiv@quotient,w
  4517  0E75  00C4               	movwf	?___awdiv
  4518  0E76  0008               	return
  4519  0E77                     __end_of___awdiv:	
  4520                           
  4521                           	psect	text14
  4522  0D44                     __ptext14:	
  4523 ;; *************** function _modes_display *****************
  4524 ;; Defined at:
  4525 ;;		line 199 in file "main.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4539 ;;      Params:         0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0
  4541 ;;      Temps:          0       1       0       0       0
  4542 ;;      Totals:         0       1       0       0       0
  4543 ;;Total ram usage:        1 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    3
  4546 ;; This function calls:
  4547 ;;		_clcd_print
  4548 ;; This function is called by:
  4549 ;;		_mode_select
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           
  4554                           ;psect for function _modes_display
  4555  0D44                     _modes_display:	
  4556                           
  4557                           ;main.c: 201: clcd_print("1.Micro", (0x80 + 0));
  4558                           
  4559                           ;incstack = 0
  4560                           ; Regs used in _modes_display: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4561  0D44  3027               	movlw	low (STR_4| (0+32768))
  4562  0D45  1283               	bcf	3,5	;RP0=0, select bank0
  4563  0D46  1303               	bcf	3,6	;RP1=0, select bank0
  4564  0D47  00C5               	movwf	clcd_print@str
  4565  0D48  3086               	movlw	high (STR_4| (0+32768))
  4566  0D49  00C6               	movwf	clcd_print@str+1
  4567  0D4A  3080               	movlw	128
  4568  0D4B  00C8               	movwf	??_modes_display
  4569  0D4C  0848               	movf	??_modes_display,w
  4570  0D4D  00C7               	movwf	clcd_print@addr
  4571  0D4E  120A  118A  27CB  120A  158A  	fcall	_clcd_print
  4572                           
  4573                           ;main.c: 202: clcd_print("2.Grill", (0xC0 + 0));
  4574  0D53  301F               	movlw	low (STR_5| (0+32768))
  4575  0D54  1283               	bcf	3,5	;RP0=0, select bank0
  4576  0D55  1303               	bcf	3,6	;RP1=0, select bank0
  4577  0D56  00C5               	movwf	clcd_print@str
  4578  0D57  3086               	movlw	high (STR_5| (0+32768))
  4579  0D58  00C6               	movwf	clcd_print@str+1
  4580  0D59  30C0               	movlw	192
  4581  0D5A  00C8               	movwf	??_modes_display
  4582  0D5B  0848               	movf	??_modes_display,w
  4583  0D5C  00C7               	movwf	clcd_print@addr
  4584  0D5D  120A  118A  27CB  120A  158A  	fcall	_clcd_print
  4585                           
  4586                           ;main.c: 203: clcd_print("3.Convection", (0x90 + 0));
  4587  0D62  30E4               	movlw	low (STR_6| (0+32768))
  4588  0D63  1283               	bcf	3,5	;RP0=0, select bank0
  4589  0D64  1303               	bcf	3,6	;RP1=0, select bank0
  4590  0D65  00C5               	movwf	clcd_print@str
  4591  0D66  3085               	movlw	high (STR_6| (0+32768))
  4592  0D67  00C6               	movwf	clcd_print@str+1
  4593  0D68  3090               	movlw	144
  4594  0D69  00C8               	movwf	??_modes_display
  4595  0D6A  0848               	movf	??_modes_display,w
  4596  0D6B  00C7               	movwf	clcd_print@addr
  4597  0D6C  120A  118A  27CB  120A  158A  	fcall	_clcd_print
  4598                           
  4599                           ;main.c: 204: clcd_print("4.Start", (0xD0 + 0));
  4600  0D71  302F               	movlw	low (STR_7| (0+32768))
  4601  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  4603  0D74  00C5               	movwf	clcd_print@str
  4604  0D75  3086               	movlw	high (STR_7| (0+32768))
  4605  0D76  00C6               	movwf	clcd_print@str+1
  4606  0D77  30D0               	movlw	208
  4607  0D78  00C8               	movwf	??_modes_display
  4608  0D79  0848               	movf	??_modes_display,w
  4609  0D7A  00C7               	movwf	clcd_print@addr
  4610  0D7B  120A  118A  27CB   	fcall	_clcd_print
  4611  0D7E  0008               	return
  4612  0D7F                     __end_of_modes_display:	
  4613                           
  4614                           	psect	text15
  4615  07CB                     __ptext15:	
  4616 ;; *************** function _clcd_print *****************
  4617 ;; Defined at:
  4618 ;;		line 62 in file "clcd.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  str             2    1[BANK0 ] PTR const unsigned char 
  4621 ;;		 -> STR_26(4), STR_25(12), STR_24(14), STR_23(15), 
  4622 ;;		 -> STR_22(17), STR_21(12), STR_20(17), STR_19(16), 
  4623 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(10), 
  4624 ;;		 -> STR_14(13), STR_13(17), STR_12(3), STR_11(3), 
  4625 ;;		 -> min_arr(3), sec_arr(3), STR_10(17), STR_9(12), 
  4626 ;;		 -> STR_8(17), STR_7(8), STR_6(13), STR_5(8), 
  4627 ;;		 -> STR_4(8), STR_3(17), STR_2(17), STR_1(17), 
  4628 ;;  addr            1    3[BANK0 ] unsigned char 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4640 ;;      Params:         0       3       0       0       0
  4641 ;;      Locals:         0       0       0       0       0
  4642 ;;      Temps:          0       0       0       0       0
  4643 ;;      Totals:         0       3       0       0       0
  4644 ;;Total ram usage:        3 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    2
  4647 ;; This function calls:
  4648 ;;		_clcd_write
  4649 ;; This function is called by:
  4650 ;;		_main
  4651 ;;		_power_on
  4652 ;;		_modes_display
  4653 ;;		_set_time
  4654 ;;		_door_status_check
  4655 ;;		_time_dis
  4656 ;;		_set_temp
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           
  4661                           ;psect for function _clcd_print
  4662  07CB                     _clcd_print:	
  4663                           
  4664                           ;clcd.c: 64: clcd_write(addr, 0);
  4665                           
  4666                           ;incstack = 0
  4667                           ; Regs used in _clcd_print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4668  07CB  01F4               	clrf	clcd_write@mode
  4669  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  4670  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  4671  07CE  0847               	movf	clcd_print@addr,w
  4672  07CF  120A  158A  24D6  120A  118A  	fcall	_clcd_write
  4673  07D4                     l2450:	
  4674                           ;clcd.c: 66: while (*str != '\0')
  4675                           
  4676  07D4  1283               	bcf	3,5	;RP0=0, select bank0
  4677  07D5  1303               	bcf	3,6	;RP1=0, select bank0
  4678  07D6  0846               	movf	clcd_print@str+1,w
  4679  07D7  00FF               	movwf	127
  4680  07D8  0845               	movf	clcd_print@str,w
  4681  07D9  0084               	movwf	4
  4682  07DA  120A  158A  2000  120A  118A  	fcall	stringtab
  4683  07DF  3A00               	xorlw	0
  4684  07E0  1903               	btfsc	3,2
  4685  07E1  0008               	return
  4686                           
  4687                           ;clcd.c: 67: {
  4688                           ;clcd.c: 68: clcd_write(*str, 1);
  4689  07E2  01F4               	clrf	clcd_write@mode
  4690  07E3  0AF4               	incf	clcd_write@mode,f
  4691  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  4692  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  4693  07E6  0846               	movf	clcd_print@str+1,w
  4694  07E7  00FF               	movwf	127
  4695  07E8  0845               	movf	clcd_print@str,w
  4696  07E9  0084               	movwf	4
  4697  07EA  120A  158A  2000  120A  118A  	fcall	stringtab
  4698  07EF  120A  158A  24D6  120A  118A  	fcall	_clcd_write
  4699                           
  4700                           ;clcd.c: 69: str++;
  4701  07F4  3001               	movlw	1
  4702  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  4703  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  4704  07F7  07C5               	addwf	clcd_print@str,f
  4705  07F8  1803               	skipnc
  4706  07F9  0AC6               	incf	clcd_print@str+1,f
  4707  07FA  2FD4               	goto	l2450
  4708  07FB                     __end_of_clcd_print:	
  4709                           
  4710                           	psect	text16
  4711  0C75                     __ptext16:	
  4712 ;; *************** function _init_config *****************
  4713 ;; Defined at:
  4714 ;;		line 21 in file "main.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0, pclath, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4728 ;;      Params:         0       0       0       0       0
  4729 ;;      Locals:         0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0
  4731 ;;      Totals:         0       0       0       0       0
  4732 ;;Total ram usage:        0 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    4
  4735 ;; This function calls:
  4736 ;;		_init_clcd
  4737 ;;		_init_matrix_keypad
  4738 ;;		_init_timer2
  4739 ;; This function is called by:
  4740 ;;		_main
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           
  4745                           ;psect for function _init_config
  4746  0C75                     _init_config:	
  4747                           
  4748                           ;main.c: 22: init_clcd();
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _init_config: [wreg+status,2+status,0+pclath+cstack]
  4752  0C75  120A  158A  2449  120A  158A  	fcall	_init_clcd
  4753                           
  4754                           ;main.c: 23: init_matrix_keypad();
  4755  0C7A  120A  158A  2452  120A  158A  	fcall	_init_matrix_keypad
  4756                           
  4757                           ;main.c: 24: init_timer2();
  4758  0C7F  120A  118A  24F3   	fcall	_init_timer2
  4759                           
  4760                           ;main.c: 26: TRISC1 = 0;
  4761  0C82  1683               	bsf	3,5	;RP0=1, select bank1
  4762  0C83  1303               	bcf	3,6	;RP1=0, select bank1
  4763  0C84  1087               	bcf	7,1	;volatile
  4764                           
  4765                           ;main.c: 27: RC1 = 0;
  4766  0C85  1283               	bcf	3,5	;RP0=0, select bank0
  4767  0C86  1303               	bcf	3,6	;RP1=0, select bank0
  4768  0C87  1087               	bcf	7,1	;volatile
  4769                           
  4770                           ;main.c: 29: TRISC2 = 0;
  4771  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  4772  0C89  1303               	bcf	3,6	;RP1=0, select bank1
  4773  0C8A  1107               	bcf	7,2	;volatile
  4774                           
  4775                           ;main.c: 30: RC2 = 0;
  4776  0C8B  1283               	bcf	3,5	;RP0=0, select bank0
  4777  0C8C  1303               	bcf	3,6	;RP1=0, select bank0
  4778  0C8D  1107               	bcf	7,2	;volatile
  4779                           
  4780                           ;main.c: 35: PEIE = 1;
  4781  0C8E  170B               	bsf	11,6	;volatile
  4782                           
  4783                           ;main.c: 36: GIE = 1;
  4784  0C8F  178B               	bsf	11,7	;volatile
  4785  0C90  0008               	return
  4786  0C91                     __end_of_init_config:	
  4787                           
  4788                           	psect	text17
  4789  04F3                     __ptext17:	
  4790 ;; *************** function _init_timer2 *****************
  4791 ;; Defined at:
  4792 ;;		line 2 in file "timers.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4806 ;;      Params:         0       0       0       0       0
  4807 ;;      Locals:         0       0       0       0       0
  4808 ;;      Temps:          0       0       0       0       0
  4809 ;;      Totals:         0       0       0       0       0
  4810 ;;Total ram usage:        0 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    1
  4813 ;; This function calls:
  4814 ;;		Nothing
  4815 ;; This function is called by:
  4816 ;;		_init_config
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _init_timer2
  4822  04F3                     _init_timer2:	
  4823                           
  4824                           ;timers.c: 5: T2CKPS0 = 1;
  4825                           
  4826                           ;incstack = 0
  4827                           ; Regs used in _init_timer2: [wreg]
  4828  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  4829  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  4830  04F5  1412               	bsf	18,0	;volatile
  4831                           
  4832                           ;timers.c: 6: T2CKPS1 = 1;
  4833  04F6  1492               	bsf	18,1	;volatile
  4834                           
  4835                           ;timers.c: 9: PR2 = 250;
  4836  04F7  30FA               	movlw	250
  4837  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  4838  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  4839  04FA  0092               	movwf	18	;volatile
  4840                           
  4841                           ;timers.c: 12: TMR2IE = 1;
  4842  04FB  148C               	bsf	12,1	;volatile
  4843                           
  4844                           ;timers.c: 15: TMR2ON = 0;
  4845  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  4846  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  4847  04FE  1112               	bcf	18,2	;volatile
  4848  04FF  0008               	return
  4849  0500                     __end_of_init_timer2:	
  4850                           
  4851                           	psect	text18
  4852  0C52                     __ptext18:	
  4853 ;; *************** function _init_matrix_keypad *****************
  4854 ;; Defined at:
  4855 ;;		line 4 in file "matrix_keypad.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;		None
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, status,2
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4869 ;;      Params:         0       0       0       0       0
  4870 ;;      Locals:         0       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0
  4872 ;;      Totals:         0       0       0       0       0
  4873 ;;Total ram usage:        0 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    1
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_init_config
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _init_matrix_keypad
  4885  0C52                     _init_matrix_keypad:	
  4886                           
  4887                           ;matrix_keypad.c: 7: TRISB = TRISB | 0x07;
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in _init_matrix_keypad: [wreg+status,2]
  4891  0C52  1683               	bsf	3,5	;RP0=1, select bank1
  4892  0C53  1303               	bcf	3,6	;RP1=0, select bank1
  4893  0C54  0806               	movf	6,w	;volatile
  4894  0C55  3807               	iorlw	7
  4895  0C56  0086               	movwf	6	;volatile
  4896                           
  4897                           ;matrix_keypad.c: 9: TRISD = TRISD & 0xF0;
  4898  0C57  0808               	movf	8,w	;volatile
  4899  0C58  39F0               	andlw	240
  4900  0C59  0088               	movwf	8	;volatile
  4901                           
  4902                           ;matrix_keypad.c: 12: nRBPU = 0;
  4903  0C5A  1381               	bcf	1,7	;volatile
  4904                           
  4905                           ;matrix_keypad.c: 15: RD3 = 1;
  4906  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  4907  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  4908  0C5D  1588               	bsf	8,3	;volatile
  4909                           
  4910                           ;matrix_keypad.c: 16: RD2 = 1;
  4911  0C5E  1508               	bsf	8,2	;volatile
  4912                           
  4913                           ;matrix_keypad.c: 17: RD1 = 1;
  4914  0C5F  1488               	bsf	8,1	;volatile
  4915                           
  4916                           ;matrix_keypad.c: 18: RD0 = 1;
  4917  0C60  1408               	bsf	8,0	;volatile
  4918  0C61  0008               	return
  4919  0C62                     __end_of_init_matrix_keypad:	
  4920                           
  4921                           	psect	text19
  4922  0C49                     __ptext19:	
  4923 ;; *************** function _init_clcd *****************
  4924 ;; Defined at:
  4925 ;;		line 44 in file "clcd.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      void 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0, pclath, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4939 ;;      Params:         0       0       0       0       0
  4940 ;;      Locals:         0       0       0       0       0
  4941 ;;      Temps:          0       0       0       0       0
  4942 ;;      Totals:         0       0       0       0       0
  4943 ;;Total ram usage:        0 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    3
  4946 ;; This function calls:
  4947 ;;		_init_display_controller
  4948 ;; This function is called by:
  4949 ;;		_init_config
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           
  4954                           ;psect for function _init_clcd
  4955  0C49                     _init_clcd:	
  4956                           
  4957                           ;clcd.c: 47: TRISD = 0x00;
  4958                           
  4959                           ;incstack = 0
  4960                           ; Regs used in _init_clcd: [wreg+status,2+status,0+pclath+cstack]
  4961  0C49  1683               	bsf	3,5	;RP0=1, select bank1
  4962  0C4A  1303               	bcf	3,6	;RP1=0, select bank1
  4963  0C4B  0188               	clrf	8	;volatile
  4964                           
  4965                           ;clcd.c: 50: TRISE2 = 0;
  4966  0C4C  1109               	bcf	9,2	;volatile
  4967                           
  4968                           ;clcd.c: 51: TRISE1 = 0;
  4969  0C4D  1089               	bcf	9,1	;volatile
  4970                           
  4971                           ;clcd.c: 53: init_display_controller();
  4972  0C4E  120A  158A  2677   	fcall	_init_display_controller
  4973  0C51  0008               	return
  4974  0C52                     __end_of_init_clcd:	
  4975                           
  4976                           	psect	text20
  4977  0E77                     __ptext20:	
  4978 ;; *************** function _init_display_controller *****************
  4979 ;; Defined at:
  4980 ;;		line 21 in file "clcd.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0, pclath, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4994 ;;      Params:         0       0       0       0       0
  4995 ;;      Locals:         0       0       0       0       0
  4996 ;;      Temps:          0       2       0       0       0
  4997 ;;      Totals:         0       2       0       0       0
  4998 ;;Total ram usage:        2 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    2
  5001 ;; This function calls:
  5002 ;;		_clcd_write
  5003 ;; This function is called by:
  5004 ;;		_init_clcd
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _init_display_controller
  5010  0E77                     _init_display_controller:	
  5011                           
  5012                           ;clcd.c: 24: _delay((unsigned long)((30)*(20000000/4000.0)));
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _init_display_controller: [wreg+status,2+status,0+pclath+cstack]
  5016  0E77  30C3               	movlw	195
  5017  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  5018  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  5019  0E7A  00C6               	movwf	??_init_display_controller+1
  5020  0E7B  30CC               	movlw	204
  5021  0E7C  00C5               	movwf	??_init_display_controller
  5022  0E7D                     u3187:	
  5023  0E7D  0BC5               	decfsz	??_init_display_controller,f
  5024  0E7E  2E7D               	goto	u3187
  5025  0E7F  0BC6               	decfsz	??_init_display_controller+1,f
  5026  0E80  2E7D               	goto	u3187
  5027  0E81  0000               	nop
  5028                           
  5029                           ;clcd.c: 27: clcd_write(0x30, 0);
  5030  0E82  01F4               	clrf	clcd_write@mode
  5031  0E83  3030               	movlw	48
  5032  0E84  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  5033                           
  5034                           ;clcd.c: 28: _delay((unsigned long)((4100)*(20000000/4000000.0)));
  5035  0E89  301B               	movlw	27
  5036  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  5037  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  5038  0E8C  00C6               	movwf	??_init_display_controller+1
  5039  0E8D  309D               	movlw	157
  5040  0E8E  00C5               	movwf	??_init_display_controller
  5041  0E8F                     u3197:	
  5042  0E8F  0BC5               	decfsz	??_init_display_controller,f
  5043  0E90  2E8F               	goto	u3197
  5044  0E91  0BC6               	decfsz	??_init_display_controller+1,f
  5045  0E92  2E8F               	goto	u3197
  5046  0E93  2E94               	nop2
  5047                           
  5048                           ;clcd.c: 29: clcd_write(0x30, 0);
  5049  0E94  01F4               	clrf	clcd_write@mode
  5050  0E95  3030               	movlw	48
  5051  0E96  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  5052                           
  5053                           ;clcd.c: 30: _delay((unsigned long)((100)*(20000000/4000000.0)));
  5054  0E9B  30A5               	movlw	165
  5055  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  5056  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  5057  0E9E  00C5               	movwf	??_init_display_controller
  5058  0E9F                     u3207:	
  5059  0E9F  0BC5               	decfsz	??_init_display_controller,f
  5060  0EA0  2E9F               	goto	u3207
  5061  0EA1  2EA2               	nop2
  5062                           
  5063                           ;clcd.c: 31: clcd_write(0x30, 0);
  5064  0EA2  01F4               	clrf	clcd_write@mode
  5065  0EA3  3030               	movlw	48
  5066  0EA4  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  5067                           
  5068                           ;clcd.c: 32: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5069  0EA9  2EAA               	nop2	;2 cycle nop
  5070  0EAA  2EAB               	nop2	;2 cycle nop
  5071  0EAB  0000               	nop
  5072                           
  5073                           ;clcd.c: 34: clcd_write(0x02, 0);
  5074  0EAC  01F4               	clrf	clcd_write@mode
  5075  0EAD  3002               	movlw	2
  5076  0EAE  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  5077                           
  5078                           ;clcd.c: 35: _delay((unsigned long)((100)*(20000000/4000000.0)));
  5079  0EB3  30A5               	movlw	165
  5080  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  5081  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  5082  0EB6  00C5               	movwf	??_init_display_controller
  5083  0EB7                     u3217:	
  5084  0EB7  0BC5               	decfsz	??_init_display_controller,f
  5085  0EB8  2EB7               	goto	u3217
  5086  0EB9  2EBA               	nop2
  5087                           
  5088                           ;clcd.c: 36: clcd_write(0x28, 0);
  5089  0EBA  01F4               	clrf	clcd_write@mode
  5090  0EBB  3028               	movlw	40
  5091  0EBC  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  5092                           
  5093                           ;clcd.c: 37: _delay((unsigned long)((100)*(20000000/4000000.0)));
  5094  0EC1  30A5               	movlw	165
  5095  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  5096  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  5097  0EC4  00C5               	movwf	??_init_display_controller
  5098  0EC5                     u3227:	
  5099  0EC5  0BC5               	decfsz	??_init_display_controller,f
  5100  0EC6  2EC5               	goto	u3227
  5101  0EC7  2EC8               	nop2
  5102                           
  5103                           ;clcd.c: 38: clcd_write(0x01, 0);
  5104  0EC8  01F4               	clrf	clcd_write@mode
  5105  0EC9  3001               	movlw	1
  5106  0ECA  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  5107                           
  5108                           ;clcd.c: 39: _delay((unsigned long)((500)*(20000000/4000000.0)));
  5109  0ECF  3004               	movlw	4
  5110  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  5111  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  5112  0ED2  00C6               	movwf	??_init_display_controller+1
  5113  0ED3  303D               	movlw	61
  5114  0ED4  00C5               	movwf	??_init_display_controller
  5115  0ED5                     u3237:	
  5116  0ED5  0BC5               	decfsz	??_init_display_controller,f
  5117  0ED6  2ED5               	goto	u3237
  5118  0ED7  0BC6               	decfsz	??_init_display_controller+1,f
  5119  0ED8  2ED5               	goto	u3237
  5120                           
  5121                           ;clcd.c: 40: clcd_write(0x0C, 0);
  5122  0ED9  01F4               	clrf	clcd_write@mode
  5123  0EDA  300C               	movlw	12
  5124  0EDB  120A  158A  24D6  120A  158A  	fcall	_clcd_write
  5125                           
  5126                           ;clcd.c: 41: _delay((unsigned long)((100)*(20000000/4000000.0)));
  5127  0EE0  30A5               	movlw	165
  5128  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  5129  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  5130  0EE3  00C5               	movwf	??_init_display_controller
  5131  0EE4                     u3247:	
  5132  0EE4  0BC5               	decfsz	??_init_display_controller,f
  5133  0EE5  2EE4               	goto	u3247
  5134  0EE6  2EE7               	nop2
  5135  0EE7  0008               	return
  5136  0EE8                     __end_of_init_display_controller:	
  5137                           
  5138                           	psect	text21
  5139  0CD6                     __ptext21:	
  5140 ;; *************** function _clcd_write *****************
  5141 ;; Defined at:
  5142 ;;		line 4 in file "clcd.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  byte            1    wreg     unsigned char 
  5145 ;;  mode            1    4[COMMON] unsigned char 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  byte            1    0[BANK0 ] unsigned char 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      void 
  5150 ;; Registers used:
  5151 ;;		wreg, status,2, status,0
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5157 ;;      Params:         1       0       0       0       0
  5158 ;;      Locals:         0       1       0       0       0
  5159 ;;      Temps:          2       0       0       0       0
  5160 ;;      Totals:         3       1       0       0       0
  5161 ;;Total ram usage:        4 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    1
  5164 ;; This function calls:
  5165 ;;		Nothing
  5166 ;; This function is called by:
  5167 ;;		_init_display_controller
  5168 ;;		_clcd_putch
  5169 ;;		_clcd_print
  5170 ;;		_main
  5171 ;;		_clear_dis
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           
  5176                           ;psect for function _clcd_write
  5177  0CD6                     _clcd_write:	
  5178                           
  5179                           ;incstack = 0
  5180                           ; Regs used in _clcd_write: [wreg+status,2+status,0]
  5181                           ;clcd_write@byte stored from wreg
  5182  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  5183  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  5184  0CD8  00C4               	movwf	clcd_write@byte
  5185                           
  5186                           ;clcd.c: 6: RE2 = mode;
  5187  0CD9  1C74               	btfss	clcd_write@mode,0
  5188  0CDA  2CDF               	goto	u2190
  5189  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  5190  0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  5191  0CDD  1509               	bsf	9,2	;volatile
  5192  0CDE  2CE2               	goto	l2426
  5193  0CDF                     u2190:	
  5194  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  5195  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  5196  0CE1  1109               	bcf	9,2	;volatile
  5197  0CE2                     l2426:	
  5198                           
  5199                           ;clcd.c: 8: PORTD = byte & 0xF0;
  5200  0CE2  0844               	movf	clcd_write@byte,w
  5201  0CE3  39F0               	andlw	240
  5202  0CE4  0088               	movwf	8	;volatile
  5203                           
  5204                           ;clcd.c: 9: RE1 = 1;
  5205  0CE5  1489               	bsf	9,1	;volatile
  5206                           
  5207                           ;clcd.c: 10: _delay((unsigned long)((100)*(20000000/4000000.0)));
  5208  0CE6  30A6               	movlw	166
  5209  0CE7  00F5               	movwf	??_clcd_write
  5210  0CE8                     u3257:	
  5211  0CE8  0BF5               	decfsz	??_clcd_write,f
  5212  0CE9  2CE8               	goto	u3257
  5213  0CEA  0000               	nop
  5214                           
  5215                           ;clcd.c: 11: RE1 = 0;
  5216  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  5217  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  5218  0CED  1089               	bcf	9,1	;volatile
  5219                           
  5220                           ;clcd.c: 13: PORTD = (byte & 0x0F) << 4;
  5221  0CEE  0844               	movf	clcd_write@byte,w
  5222  0CEF  390F               	andlw	15
  5223  0CF0  00F5               	movwf	??_clcd_write
  5224  0CF1  3003               	movlw	3
  5225  0CF2                     u2215:	
  5226  0CF2  1003               	clrc
  5227  0CF3  0DF5               	rlf	??_clcd_write,f
  5228  0CF4  3EFF               	addlw	-1
  5229  0CF5  1D03               	skipz
  5230  0CF6  2CF2               	goto	u2215
  5231  0CF7  1003               	clrc
  5232  0CF8  0D75               	rlf	??_clcd_write,w
  5233  0CF9  0088               	movwf	8	;volatile
  5234                           
  5235                           ;clcd.c: 14: RE1 = 1;
  5236  0CFA  1489               	bsf	9,1	;volatile
  5237                           
  5238                           ;clcd.c: 15: _delay((unsigned long)((100)*(20000000/4000000.0)));
  5239  0CFB  30A6               	movlw	166
  5240  0CFC  00F5               	movwf	??_clcd_write
  5241  0CFD                     u3267:	
  5242  0CFD  0BF5               	decfsz	??_clcd_write,f
  5243  0CFE  2CFD               	goto	u3267
  5244  0CFF  0000               	nop
  5245                           
  5246                           ;clcd.c: 16: RE1 = 0;
  5247  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0D02  1089               	bcf	9,1	;volatile
  5250                           
  5251                           ;clcd.c: 18: _delay((unsigned long)((4100)*(20000000/4000000.0)));
  5252  0D03  301B               	movlw	27
  5253  0D04  00F6               	movwf	??_clcd_write+1
  5254  0D05  309E               	movlw	158
  5255  0D06  00F5               	movwf	??_clcd_write
  5256  0D07                     u3277:	
  5257  0D07  0BF5               	decfsz	??_clcd_write,f
  5258  0D08  2D07               	goto	u3277
  5259  0D09  0BF6               	decfsz	??_clcd_write+1,f
  5260  0D0A  2D07               	goto	u3277
  5261  0D0B  0000               	nop
  5262  0D0C  0008               	return
  5263  0D0D                     __end_of_clcd_write:	
  5264                           
  5265                           	psect	text22
  5266  0DCC                     __ptext22:	
  5267 ;; *************** function _isr *****************
  5268 ;; Defined at:
  5269 ;;		line 6 in file "isr.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;		None
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;		None
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      void 
  5276 ;; Registers used:
  5277 ;;		wreg, status,2, status,0, btemp+1
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5283 ;;      Params:         0       0       0       0       0
  5284 ;;      Locals:         0       0       0       0       0
  5285 ;;      Temps:          4       0       0       0       0
  5286 ;;      Totals:         4       0       0       0       0
  5287 ;;Total ram usage:        4 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		Interrupt level 1
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _isr
  5298  0DCC                     _isr:	
  5299                           
  5300                           ;isr.c: 8: static unsigned int count = 0;
  5301                           ;isr.c: 10: if (TMR2IF == 1)
  5302  0DCC  1C8C               	btfss	12,1	;volatile
  5303  0DCD  2E11               	goto	i1l311
  5304                           
  5305                           ;isr.c: 11: {
  5306                           ;isr.c: 12: if (++count == 1250)
  5307  0DCE  3001               	movlw	1
  5308  0DCF  07F7               	addwf	isr@count,f
  5309  0DD0  1803               	skipnc
  5310  0DD1  0AF8               	incf	isr@count+1,f
  5311  0DD2  3000               	movlw	0
  5312  0DD3  07F8               	addwf	isr@count+1,f
  5313  0DD4  30E2               	movlw	226
  5314  0DD5  0677               	xorwf	isr@count,w
  5315  0DD6  3004               	movlw	4
  5316  0DD7  1903               	skipnz
  5317  0DD8  0678               	xorwf	isr@count+1,w
  5318  0DD9  1D03               	btfss	3,2
  5319  0DDA  2E0E               	goto	i1l2372
  5320                           
  5321                           ;isr.c: 13: {
  5322                           ;isr.c: 14: count = 0;
  5323  0DDB  01F7               	clrf	isr@count
  5324  0DDC  01F8               	clrf	isr@count+1
  5325                           
  5326                           ;isr.c: 15: if(sec > 0)
  5327  0DDD  0837               	movf	_sec+1,w
  5328  0DDE  3A80               	xorlw	128
  5329  0DDF  00FF               	movwf	127
  5330  0DE0  3080               	movlw	128
  5331  0DE1  027F               	subwf	127,w
  5332  0DE2  1D03               	skipz
  5333  0DE3  2DE6               	goto	u216_25
  5334  0DE4  3001               	movlw	1
  5335  0DE5  0236               	subwf	_sec,w
  5336  0DE6                     u216_25:	
  5337  0DE6  1C03               	skipc
  5338  0DE7  2DF1               	goto	i1l2366
  5339                           
  5340                           ;isr.c: 16: {
  5341                           ;isr.c: 17: sec--;
  5342  0DE8  30FF               	movlw	255
  5343  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  5344  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  5345  0DEB  07B6               	addwf	_sec,f
  5346  0DEC  1803               	skipnc
  5347  0DED  0AB7               	incf	_sec+1,f
  5348  0DEE  30FF               	movlw	255
  5349  0DEF  07B7               	addwf	_sec+1,f
  5350                           
  5351                           ;isr.c: 18: }
  5352  0DF0  2E0E               	goto	i1l2372
  5353  0DF1                     i1l2366:	
  5354                           
  5355                           ;isr.c: 19: else if(sec == 0 && min > 0)
  5356  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  5357  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  5358  0DF3  0836               	movf	_sec,w
  5359  0DF4  0437               	iorwf	_sec+1,w
  5360  0DF5  1D03               	btfss	3,2
  5361  0DF6  2E0E               	goto	i1l2372
  5362  0DF7  0839               	movf	_min+1,w
  5363  0DF8  3A80               	xorlw	128
  5364  0DF9  00FF               	movwf	127
  5365  0DFA  3080               	movlw	128
  5366  0DFB  027F               	subwf	127,w
  5367  0DFC  1D03               	skipz
  5368  0DFD  2E00               	goto	u218_25
  5369  0DFE  3001               	movlw	1
  5370  0DFF  0238               	subwf	_min,w
  5371  0E00                     u218_25:	
  5372  0E00  1C03               	skipc
  5373  0E01  2E0E               	goto	i1l2372
  5374                           
  5375                           ;isr.c: 20: {
  5376                           ;isr.c: 21: min--;
  5377  0E02  30FF               	movlw	255
  5378  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  5379  0E04  1303               	bcf	3,6	;RP1=0, select bank0
  5380  0E05  07B8               	addwf	_min,f
  5381  0E06  1803               	skipnc
  5382  0E07  0AB9               	incf	_min+1,f
  5383  0E08  30FF               	movlw	255
  5384  0E09  07B9               	addwf	_min+1,f
  5385                           
  5386                           ;isr.c: 22: sec = 59;
  5387  0E0A  303B               	movlw	59
  5388  0E0B  00B6               	movwf	_sec
  5389  0E0C  3000               	movlw	0
  5390  0E0D  00B7               	movwf	_sec+1
  5391  0E0E                     i1l2372:	
  5392                           
  5393                           ;isr.c: 24: }
  5394                           ;isr.c: 25: }
  5395                           ;isr.c: 27: TMR2IF = 0;
  5396  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  5397  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  5398  0E10  108C               	bcf	12,1	;volatile
  5399  0E11                     i1l311:	
  5400  0E11  0873               	movf	??_isr+3,w
  5401  0E12  00FF               	movwf	127
  5402  0E13  0872               	movf	??_isr+2,w
  5403  0E14  008A               	movwf	10
  5404  0E15  0871               	movf	??_isr+1,w
  5405  0E16  0084               	movwf	4
  5406  0E17  0E70               	swapf	??_isr^(0+-128),w
  5407  0E18  0083               	movwf	3
  5408  0E19  0EFE               	swapf	126,f
  5409  0E1A  0E7E               	swapf	126,w
  5410  0E1B  0009               	retfie
  5411  0E1C                     __end_of_isr:	
  5412  007E                     btemp	set	126	;btemp
  5413  007E                     wtemp0	set	126
  5414                           
  5415                           	psect	intentry
  5416  0004                     __pintentry:	
  5417                           ;incstack = 0
  5418                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1]
  5419                           
  5420  0004                     interrupt_function:	
  5421  007E                     saved_w	set	btemp
  5422  0004  00FE               	movwf	btemp
  5423  0005  0E03               	swapf	3,w
  5424  0006  00F0               	movwf	??_isr
  5425  0007  0804               	movf	4,w
  5426  0008  00F1               	movwf	??_isr+1
  5427  0009  080A               	movf	10,w
  5428  000A  00F2               	movwf	??_isr+2
  5429  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5430  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5431  000D  087F               	movf	btemp+1,w
  5432  000E  00F3               	movwf	??_isr+3
  5433  000F  120A  158A  2DCC   	ljmp	_isr


Data Sizes:
    Strings     311
    Constant    0
    Data        1
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     27      63
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    clcd_print@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_26(CODE[4]), STR_25(CODE[12]), STR_24(CODE[14]), STR_23(CODE[15]), 
		 -> STR_22(CODE[17]), STR_21(CODE[12]), STR_20(CODE[17]), STR_19(CODE[16]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[10]), 
		 -> STR_14(CODE[13]), STR_13(CODE[17]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> min_arr(BANK0[3]), sec_arr(BANK0[3]), STR_10(CODE[17]), STR_9(CODE[12]), 
		 -> STR_8(CODE[17]), STR_7(CODE[8]), STR_6(CODE[13]), STR_5(CODE[8]), 
		 -> STR_4(CODE[8]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_clcd_write
    _main->_read_matrix_keypad
    _read_matrix_keypad->_scan_keypad
    _clear_dis->_clcd_write
    _clcd_putch->_clcd_write
    ___awmod->___awdiv
    _clcd_print->_clcd_write
    _init_display_controller->_clcd_write

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_mode_select
    _main->_power_on
    _power_on->_clcd_putch
    _mode_select->_set_temp
    _time_dis->_clcd_putch
    _door_status_check->_clcd_print
    _set_time->___awmod
    _set_temp->_clcd_putch
    _clear_dis->_clcd_write
    _clcd_putch->___awmod
    ___awmod->___awdiv
    _modes_display->_clcd_print
    _clcd_print->_clcd_write
    _init_clcd->_init_display_controller
    _init_display_controller->_clcd_write

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   57176
                                             23 BANK0      4     4      0
                         _clcd_print
                         _clcd_write
                          _clear_dis
                        _init_config
                        _mode_select
                           _power_on
                 _read_matrix_keypad
 ---------------------------------------------------------------------------------
 (1) _read_matrix_keypad                                   3     3      0     294
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _scan_keypad
 ---------------------------------------------------------------------------------
 (2) _scan_keypad                                          2     2      0     136
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _power_on                                             7     7      0    6782
                                             16 BANK0      7     7      0
                         _clcd_print
                         _clcd_putch
 ---------------------------------------------------------------------------------
 (1) _mode_select                                          3     3      0   42132
                                             20 BANK0      3     3      0
                          _clear_dis
                      _modes_display
                           _set_temp
                           _set_time
                           _time_dis
 ---------------------------------------------------------------------------------
 (2) _time_dis                                             3     3      0   16023
                                             16 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                         _clcd_print
                         _clcd_putch
                          _clear_dis
                  _door_status_check
 ---------------------------------------------------------------------------------
 (3) _door_status_check                                    1     1      0    5872
                                              4 BANK0      1     1      0
                         _clcd_print
                          _clear_dis
 ---------------------------------------------------------------------------------
 (2) _set_time                                             3     3      0    9247
                                             14 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                             ___wmul
                         _clcd_print
                          _clear_dis
 ---------------------------------------------------------------------------------
 (2) _set_temp                                             4     4      0   10866
                                             16 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                             ___wmul
                         _clcd_print
                         _clcd_putch
                          _clear_dis
 ---------------------------------------------------------------------------------
 (4) _clear_dis                                            0     0      0     938
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _clcd_putch                                           2     1      1    1650
                                             14 BANK0      2     1      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     526
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              5 COMMON     1     1      0
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1485
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _modes_display                                        1     1      0    4934
                                              4 BANK0      1     1      0
                         _clcd_print
 ---------------------------------------------------------------------------------
 (2) _clcd_print                                           3     0      3    4934
                                              1 BANK0      3     0      3
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0     938
                          _init_clcd
                 _init_matrix_keypad
                        _init_timer2
 ---------------------------------------------------------------------------------
 (2) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0     938
            _init_display_controller
 ---------------------------------------------------------------------------------
 (3) _init_display_controller                              2     2      0     938
                                              1 BANK0      2     2      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           4     3      1     938
                                              4 COMMON     3     2      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcd_print
     _clcd_write
   _clcd_write
   _clear_dis
     _clcd_write
   _init_config
     _init_clcd
       _init_display_controller
         _clcd_write
     _init_matrix_keypad
     _init_timer2
   _mode_select
     _clear_dis
       _clcd_write
     _modes_display
       _clcd_print
         _clcd_write
     _set_temp
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___wmul
       _clcd_print
         _clcd_write
       _clcd_putch
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         _clcd_write (ARG)
       _clear_dis
         _clcd_write
     _set_time
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___wmul
       _clcd_print
         _clcd_write
       _clear_dis
         _clcd_write
     _time_dis
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _clcd_print
         _clcd_write
       _clcd_putch
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         _clcd_write (ARG)
       _clear_dis
         _clcd_write
       _door_status_check
         _clcd_print
           _clcd_write
         _clear_dis
           _clcd_write
   _power_on
     _clcd_print
       _clcd_write
     _clcd_putch
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
       _clcd_write (ARG)
   _read_matrix_keypad
     _scan_keypad

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1B      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      49      12        0.0%
ABS                  0      0      49       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Sep 27 12:13:28 2021

                               pc 0002                    clcd_print@addr 0047  __size_of_init_display_controller 0071  
                              l31 0F98                                l40 0FB6                                l32 0F94  
                              l29 0F90                                l54 0FF6                                l46 0FD4  
                              l38 0FB2                                l47 0FDC                                l39 0FBA  
                              l56 0FFA                                l48 0FD8                      ___awdiv@sign 0049  
                              fsr 0004               ___wmul@multiplicand 0046                _init_matrix_keypad 0C52  
                             l211 0797                               l212 079A                               l263 0D37  
                             l408 0CBF                               l259 021A                               _GIE 005F  
                             _RB0 0030                               _RB1 0031                               _RB2 0032  
                             _RC1 0039                               _RB3 0033                               _RD0 0040  
                             _RC2 003A                               _RD1 0041                               _RD2 0042  
                             _RD3 0043                               _RE1 0049                               _RE2 004A  
                             _PR2 0092                               _min 0038                               _sec 0036  
                             _isr 0DCC                               _ret 0034                    clcd_putch@addr 0052  
                             fsr0 0004                    clcd_putch@data 0053                               indf 0000  
                    ___awmod@sign 0051               ?_init_matrix_keypad 0070                              l3010 078E  
                            l3020 07C0                              l3100 04CB                              l3110 04DD  
                            l3008 078B                              l3018 07A1                              l3106 04D4  
                            l2500 0CB5                              l3060 0469                              l3116 04EA  
                            l3038 041A                              l2520 0E28                              l2600 0FC2  
                            l2426 0CE2                              l2450 07D4                              l3170 0211  
                            l3090 04A2                              l2620 0FE4                              l3076 0490  
                            l3068 047C                              l2526 0E33                              l2552 0E72  
                            l2544 0E5F                              l2536 0E3B                              l1744 0D8B  
                            l2800 01F0                              l3168 07A6                              l2560 0F7E  
                            l2538 0E49                              l1770 0DC7                              l1762 0DB4  
                            l2802 01FC                              l2548 0E6A                              l1756 0D98  
                            l1748 0D92                              l2900 03F2                              l2740 00E2  
                            l2732 00AB                              l2492 0D3E                              l2580 0FA0  
                            l1758 0DA6                              l1766 0DBF                              l2806 020A  
                            l2750 0115                              l2718 0071                              l2638 0FFE  
                            l2904 0403                              l2832 0266                              l2744 00F4  
                            l2930 0CAC                              l2844 029E                              l2756 012B  
                            l2764 014E                              l2870 02E5                              l2774 015F  
                            l2934 0CB1                              l2918 0CA3                              l2848 02A7  
                            l2882 0309                              l2884 0373                              l2796 01E9  
                            l2972 0F44                              l2964 0F17                              l2990 0754  
                            l2982 0736                              l2958 0EF7                              l2888 0375  
                            l2984 073C                              l2986 0742                              l2978 0F64  
                            l2988 074B                              l2998 0772                              ?_isr 0070  
                            STR_1 0533                              STR_2 0522                              STR_3 0555  
                            STR_4 0627                              STR_5 061F                              STR_6 05E4  
                            STR_7 062F                              STR_8 0577                              STR_9 0609  
                            u2215 0CF2                              u1335 0D9B                              u3105 04B8  
                            u1355 0DAC                              u2325 0E3E                              u1365 0DB5  
                            u2190 0CDF                              u3207 0E9F                              u3217 0EB7  
                            u2345 0E4A                              u2265 0CC0                              u3227 0EC5  
                            u2355 0E56                              u2275 0CC7                              u3147 0462  
                            u3237 0ED5                              u2365 0E60                              u3157 0F6C  
                            u3247 0EE4                              u2615 008D                              u3167 071F  
                            u3257 0CE8                              u3177 02D7                              u2705 0143  
                            u2625 00B6                              u2730 01C6                              u3267 0CFD  
                            u3187 0E7D                              u2635 00C3                              u2740 01C7  
                            u3277 0D07                              u3197 0E8F                              u2805 0282  
                            u2645 00ED                              u2655 00FF                              u2575 0034  
                            u2665 010C                              u2835 02BB                              _PEIE 005E  
                            u2860 038A                              u2685 0122                              u2870 038B  
                            u2695 0136                              u2935 0EF5                              u2945 0F15  
                            u2955 0F42                              u2965 0F62                              _flag 0032  
                            _main 0405                              btemp 007E                              start 0012  
            ??_init_matrix_keypad 0074                    clcd_write@byte 0044                    clcd_write@mode 0074  
      __size_of_door_status_check 0037                             ??_isr 0070                             ?_main 0070  
                 __end_of___awdiv 0E77                             STR_10 0599                             STR_11 050E  
                           STR_12 050E                             STR_20 0566                             STR_21 05FD  
                           STR_13 0588                             STR_22 0599                             STR_14 05D7  
                           STR_15 0615                             STR_23 05BA                             STR_24 05C9  
                           STR_16 0544                             STR_25 05F1                             STR_17 0511  
                   __CFG_WDTE$OFF 0000                             STR_26 050D                             STR_18 0500  
                           STR_19 05AA                   __end_of___awmod 0DCC                   ___awdiv@divisor 0044  
                           i1l311 0E11                      ?_init_config 0070                   ___awdiv@counter 0048  
                           _PORTD 0008                             _TRISB 0086                             _TRISD 0088  
                    ?_init_timer2 0070                             _nRBPU 040F                _read_matrix_keypad 0C91  
                           pclath 000A               ?_read_matrix_keypad 0070                      ?_mode_select 0070  
                           status 0003                             wtemp0 007E                      ?_scan_keypad 0070  
                 __initialization 0015                      __end_of_main 04F3              ??_read_matrix_keypad 0076  
                          ??_main 005B                  ___awdiv@dividend 0046                            i1l2372 0E0E  
                          i1l2366 0DF1                            u216_25 0DE6                            u218_25 0E00  
                          _TMR2IE 0461                            _TMR2IF 0061                            _TMR2ON 0092  
                          _TRISC1 0439                            _TRISC2 043A                            _TRISE1 0449  
                          _TRISE2 044A                    mode_select@key 005A           _init_display_controller 0E77  
                          ___wmul 0CB3                         ??___awdiv 0074                         ??___awmod 0075  
                ___awdiv@quotient 004A                   ___awmod@divisor 004C                   ___awmod@counter 0050  
                   power_on@i_138 0059                      __pdataCOMMON 0079                  __end_of_set_temp 0405  
                __end_of_set_time 021B                  __end_of_time_dis 0732                            saved_w 007E  
                __end_of_power_on 0F74           __end_of__initialization 0024                    __pcstackCOMMON 0070  
              __size_of_clear_dis 0006              __size_of_init_config 001C              __size_of_init_timer2 000D  
                      __pbssBANK0 0020                __size_of_init_clcd 0009         ??_init_display_controller 0045  
                      _clcd_print 07CB                        _clcd_putch 0C62              __size_of_mode_select 0099  
                      _clcd_write 0CD6              __size_of_scan_keypad 008C                        __pmaintext 0405  
                         ?___wmul 0044                        __pintentry 0004                           _T2CKPS0 0090  
                         _T2CKPS1 0091            __size_of_modes_display 003B                        __stringtab 0800  
               __end_of_clear_dis 0C41                         ?_set_temp 0070                         ?_set_time 0070  
                       ?_time_dis 0070       __size_of_init_matrix_keypad 0010                           ___awdiv 0E1C  
                         ___awmod 0D7F                         ?_power_on 0070                   __size_of___wmul 0023  
                         __ptext1 0C91                           __ptext2 0F74                           __ptext3 0EE8  
                         __ptext4 0732                           __ptext5 0637                           __ptext6 0D0D  
                         __ptext7 0028                           __ptext8 021B                           __ptext9 0C3B  
 __end_of_init_display_controller 0EE8                 __end_of_init_clcd 0C52                      __size_of_isr 0050  
                         _min_arr 003E                           _sec_arr 0041                  ___awmod@dividend 004E  
                         main@key 005E                           clrloop0 0C42              end_of_initialization 0024  
                     set_temp@key 0057                       set_time@key 0054                    _operation_mode 003C  
                   _modes_display 0D44                       ?_clcd_print 0045                       ?_clcd_putch 0052  
                     ?_clcd_write 0074                        _reset_flag 003A                        ??_set_temp 0054  
                      ??_set_time 0052                        ??_time_dis 0054                        ??_power_on 0054  
                    __pstringtext 0500       __size_of_read_matrix_keypad 0022                     clcd_print@str 0045  
                  ?_modes_display 0070                    __end_of___wmul 0CD6                     __pidataCOMMON 07FB  
             start_initialization 0015               __size_of_clcd_print 0030                      scan_keypad@i 0074  
             __size_of_clcd_putch 0013               __size_of_clcd_write 0037            read_matrix_keypad@mode 0044  
          read_matrix_keypad@once 0079                       __end_of_isr 0E1C                          ??___wmul 0074  
                   ??_init_config 0077                     ??_init_timer2 0074                       __pbssCOMMON 0077  
                       ___latbits 0002                     __pcstackBANK0 0044                   ??_modes_display 0048  
                   ??_mode_select 0058                     ??_scan_keypad 0074                         _clear_dis 0C3B  
                        ?___awdiv 0044                          ?___awmod 004C                         _heat_flag 0030  
               __size_of_set_temp 01EA                 __size_of_set_time 01F3                 __size_of_time_dis 00FB  
               __size_of_power_on 008C                         __pstrings 0800                         _init_clcd 0C49  
             __end_of_init_config 0C91               __end_of_init_timer2 0500          ?_init_display_controller 0070  
               interrupt_function 0004                    ___wmul@product 0074                         clear_ram0 0C41  
                    ??_clcd_print 0077                      ??_clcd_putch 0077        __end_of_init_matrix_keypad 0C62  
                    ??_clcd_write 0075                        ?_clear_dis 0070                 set_temp@key_count 0022  
             __end_of_mode_select 07CB               __end_of_scan_keypad 1000                       __stringbase 0812  
               ___wmul@multiplier 0044                __end_of_clcd_print 07FB                __end_of_clcd_putch 0C75  
              __end_of_clcd_write 0D0D                        ?_init_clcd 0070             read_matrix_keypad@key 0045  
               set_time@blink_pos 002A                     set_temp@blink 0024                     set_time@blink 002C  
      __end_of_read_matrix_keypad 0CB3                  __size_of___awdiv 005B                  __size_of___awmod 004D  
              __end_of__stringtab 0812                 set_time@key_count 0028                       _init_config 0C75  
                     _init_timer2 04F3                          __ptext10 0C62                          __ptext11 0CB3  
                        __ptext20 0E77                          __ptext12 0D7F                          __ptext21 0CD6  
                        __ptext13 0E1C                          __ptext22 0DCC                          __ptext14 0D44  
                        __ptext15 07CB                          __ptext16 0C75                          __ptext17 04F3  
                        __ptext18 0C52                          __ptext19 0C49                     __size_of_main 00EE  
                     _mode_select 0732                       _scan_keypad 0F74                       ??_clear_dis 0077  
                        _set_temp 021B                          _set_time 0028                          _time_dis 0637  
                        _power_on 0EE8                 _door_status_check 0D0D                ?_door_status_check 0070  
                       power_on@i 0057                          isr@count 0077                      set_temp@temp 0020  
                    set_temp@wait 0026                      set_time@wait 002E               ??_door_status_check 0048  
                     ??_init_clcd 0077                          intlevel1 0000                         stringcode 080A  
       __end_of_door_status_check 0D44                          stringtab 0800             __end_of_modes_display 0D7F  
